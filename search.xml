<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>C#调用pyd</title>
    <url>/post/296ae744.html</url>
    <content><![CDATA[<p>python打包成pyd在本篇博客不多叙述，请读者自行百度，本篇博客主要讲解在C#中如何调用pyd以及遇到的一些问题如何解决。</p>
<h2 id="1-安装pythonnet"><a href="#1-安装pythonnet" class="headerlink" title="1.安装pythonnet"></a>1.安装pythonnet</h2><p>pythonnet是一个强大的工具包，用于C#代码与python代码进行交互，不仅可以实现在C#中调用python，也可以实现在python中调用C#.</p>
<p>GitHub：<a href="https://github.com/pythonnet/pythonnet">https://github.com/pythonnet/pythonnet</a></p>
<ul>
<li>首先打开nuget包管理器：<br><img data-src="https://res.aimon.cc/img/20201130164610.png" alt="Alt"></li>
<li>根据你python的版本下载对应的pythonnet，笔者使用的是python3.6，所以下载的是py36。<br><img data-src="https://res.aimon.cc/img/20201130164611.png" alt="Alt"></li>
</ul>
<h2 id="2-调用pyd中的模块"><a href="#2-调用pyd中的模块" class="headerlink" title="2.调用pyd中的模块"></a>2.调用pyd中的模块</h2><ul>
<li>首先引用pythonnet：</li>
</ul>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> Python.Runtime;</span><br></pre></td></tr></table></figure>

<ul>
<li>调用pyd的模块：</li>
</ul>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//All calls to python should be inside a using (Py.GIL()) &#123;/* Your code here */&#125; block.</span></span><br><span class="line"><span class="keyword">using</span> (Py.GIL())</span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">//Import python modules using dynamic mod = Py.Import(&quot;mod&quot;), then you can call functions as normal.</span></span><br><span class="line">	<span class="comment">//All python objects should be declared as dynamic type.</span></span><br><span class="line">	<span class="built_in">dynamic</span> np = Py.Import(<span class="string">&quot;test_pyd&quot;</span>);</span><br><span class="line">	np.hello();</span><br><span class="line">	Console.ReadKey();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img data-src="https://res.aimon.cc/img/20201130164612.png" alt="Alt"></p>
<ul>
<li>python代码：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span>():</span></span><br><span class="line">    print(<span class="string">&quot;Hello world&quot;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="3-可能出现的问题及解决方案"><a href="#3-可能出现的问题及解决方案" class="headerlink" title="3.可能出现的问题及解决方案"></a>3.可能出现的问题及解决方案</h2><ul>
<li>环境变量的配置，环境变量的对应路径的python版本需要与你下载的pythonnet包版本是相同的：<br><img data-src="https://res.aimon.cc/img/20201130164613.png" alt="Alt"><br>笔者电脑中有不同版本的python，经过笔者测试后发现更换版本最简单的方式是替换环境变量的顺序，笔者是在win10系统下进行的测试，其他系统未进行过测试。<br>另外要注意你的pyd如果是使用64位编译的，则环境变量对应的python版本也需要是64位的。<br>当python368在上时：<br><img data-src="https://res.aimon.cc/img/20201130164614.png" alt="Alt"><br>当python378在上时：<br><img data-src="https://res.aimon.cc/img/20201130164615.png" alt="Alt"></li>
<li>System.DllNotFoundException:“无法加载 DLL“python36”: 找不到指定的模块。<br><img data-src="https://res.aimon.cc/img/20201130164616.png" alt="Alt"><br>解决方案：将python文件夹中的python36.dll复制到debug目录下<br><img data-src="https://res.aimon.cc/img/20201130164617.png" alt="Alt"></li>
<li>Python.Runtime.PythonException:“ModuleNotFoundError : No module named ‘test_pyd’”</li>
</ul>
<p><img data-src="https://res.aimon.cc/img/20201130164618.png" alt="Alt"><br>解决方案：将test_pyd.pyd放入debug目录下<br><img data-src="https://res.aimon.cc/img/20201130164619.png" alt="Alt"></p>
<ul>
<li>System.MissingMethodException:“Method not found: ‘System.Reflection.Emit.AssemblyBuilder System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName, System.Reflection.Emit.AssemblyBuilderAccess)’.”<br><img data-src="https://res.aimon.cc/img/20201130164620.png" alt="Alt"><br>解决方案：该问题是由于.NET框架所导致的，笔者在使用.NET Core 3.1的时候就会出现这个错误，更换为.NET Framework 4.7.2后问题解决。<br><img data-src="https://res.aimon.cc/img/20201130164621.png" alt="Alt"><br><img data-src="https://res.aimon.cc/img/20201130164622.png" alt="在这里插入图片描述"></li>
</ul>
<blockquote>
<p>转自: <a href="https://www.cnblogs.com/degc/p/13995247.html">C#调用pyd - 人类的实例 - 博客园 (cnblogs.com)</a></p>
</blockquote>
]]></content>
      <categories>
        <category>coding</category>
        <category>c#</category>
      </categories>
      <tags>
        <tag>c#</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo新建博文</title>
    <url>/post/884863d2.html</url>
    <content><![CDATA[<h4 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h4><p>创建一篇新的文章，输入如下命令，其中title替换成你的文章标题</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> hexo new title</span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> hexo new post title</span><br></pre></td></tr></table></figure>

<h4 id="实际运行"><a href="#实际运行" class="headerlink" title="实际运行"></a>实际运行</h4><p>可以看到创建的文件在/source/_posts路径下</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">D:\hexo\blog&gt;hexo new 我的第一篇博文 </span><br><span class="line">INFO  Created: D:\hexo\blog\source\_posts\<span class="number">2019</span><span class="literal">-06</span><span class="literal">-24</span>-我的第一篇博文.md</span><br><span class="line">D:\hexo\blog&gt;hexo new post <span class="string">&quot;My Second Blog&quot;</span></span><br><span class="line">INFO  Created: D:\hexo\blog\source\_posts\<span class="number">2019</span><span class="literal">-06</span><span class="literal">-24</span><span class="literal">-My</span><span class="literal">-Second</span><span class="literal">-Blog</span>.md</span><br></pre></td></tr></table></figure>

<p>打开创建的MarkDown文件，默认内容如下，我们可以在新建的文件里用MarkDown语法编辑文章</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">--- </span><br><span class="line">title: 我的第一篇博文 </span><br><span class="line">date: 2019-06-24 20:05:55 </span><br><span class="line">tags: </span><br><span class="line">---</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>IdentityServer4脱坑记录</title>
    <url>/post/31c3f66a.html</url>
    <content><![CDATA[<p>由于是老项目升级.net5比较费劲，又需要加入ids，过程比较曲折</p>
<p>终归还是配置问题</p>
<p>V4版本需要设置以下属性才能兼容.net framework webapi</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">options.EmitStaticAudienceClaim = <span class="literal">true</span></span><br><span class="line">options.AccessTokenJwtType = <span class="string">&quot;JWT&quot;</span></span><br></pre></td></tr></table></figure>

<p>V3版本需要设置一下属性才能兼容.net framework webapi</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">options.EmitLegacyResourceAudienceClaim = <span class="literal">true</span></span><br><span class="line">options.AccessTokenJwtType = <span class="string">&quot;JWT&quot;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>coding</category>
        <category>c#</category>
      </categories>
      <tags>
        <tag>c#</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows Terminal 终极美化</title>
    <url>/post/ec878511.html</url>
    <content><![CDATA[<h4 id="安装-Window-Terminal"><a href="#安装-Window-Terminal" class="headerlink" title="安装 Window Terminal"></a>安装 Window Terminal</h4><p>有两种安装方式，这个要自行选择</p>
<h5 id="git-安装"><a href="#git-安装" class="headerlink" title="git 安装"></a>git 安装</h5><p><del>前往 windows terminal 的地址下载，再使用vs2019 进行编译使用。我是拉了关天，没拉下来，放弃了。</del></p>
<h5 id="商店安装"><a href="#商店安装" class="headerlink" title="商店安装"></a>商店安装</h5><p>在微软商店里搜windows terminal，安装即可。</p>
<ol>
<li><p>商店打不开的，自行解决，直接了当的方式就是升级系统到最新版本，重启。</p>
</li>
<li><p>提示当前所在的区域不支持的话 ： </p>
<blockquote>
<p>登录账号的进账号把自己所在区域地址改成美国，然后把系统时间设置成美国。重启</p>
</blockquote>
</li>
</ol>
<p>正常情况下，你会安装成功的。 可以继续往下看了，先放一张图：   </p>
<p><img data-src="https://res.aimon.cc/img/20201201201321.jpeg" alt="钢铁侠"></p>
<p>下面开工：</p>
<h4 id="配置解释"><a href="#配置解释" class="headerlink" title="配置解释"></a>配置解释</h4><p>用到的就以下这些了，其他用不着的就不写了。 </p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&quot;profiles&quot;: &#123;</span><br><span class="line">    &quot;defaults&quot;: &#123;</span><br><span class="line">      &quot;acrylicOpacity&quot;: 0.1, //背景透明度(0-1)</span><br><span class="line">      &quot;useAcrylic&quot;: true, // 启用毛玻璃</span><br><span class="line">      &quot;backgroundImage&quot;: &quot;D:/User/chuchur/OneDrive/图片/stack.jpg&quot;, //背景图片</span><br><span class="line">      &quot;backgroundImageOpacity&quot;: 0.1, //图片透明度（0-1）</span><br><span class="line">      &quot;experimental.retroTerminalEffect&quot;: true, //复古的CRT 效果</span><br><span class="line">      &quot;backgroundImageStretchMode&quot;: &quot;uniformToFill&quot;, //填充模式</span><br><span class="line">      &quot;icon&quot;: &quot;ms-appx:///ProfileIcons/&#123;9acb9455-ca41-5af7-950f-6bca1bc9722f&#125;.png&quot;, //图标</span><br><span class="line">      &quot;fontFace&quot;: &quot;Sarasa Term SC&quot;, //字体</span><br><span class="line">      &quot;fontSize&quot;: 12, //文字大小</span><br><span class="line">      &quot;fontWeight&quot;: &quot;think&quot;, //文字宽度，可设置加粗</span><br><span class="line">      &quot;colorScheme&quot;: &quot;Solarized Dark&quot;, //主题名字</span><br><span class="line">      &quot;cursorColor&quot;: &quot;#FFFFFF&quot;, //光标颜色</span><br><span class="line">      &quot;cursorShape&quot;: &quot;bar&quot;, //光标形状</span><br><span class="line">      &quot;startingDirectory&quot;: &quot;D://Projects//&quot;, //起始目录</span><br><span class="line">      &quot;antialiasingMode&quot;: &quot;cleartype&quot; //消除文字锯齿</span><br><span class="line">    &#125;,</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<h4 id="复古的CRT-效果"><a href="#复古的CRT-效果" class="headerlink" title="复古的CRT 效果"></a>复古的CRT 效果</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&quot;experimental.retroTerminalEffect&quot;: true</span><br></pre></td></tr></table></figure>

<p>先说说复古模式，这个设计初衷是好的，我怎么觉得是眼瞎模式呢，本来300瓦的近视，开启这种模式之后，瞬间到500瓦了。 i7十代的 16G的配置，开启这种模式之后，卡成狗。很烧性能，但是装个逼什么的还是可以的，真正用起来，不建议使用，可能还在摸索阶段吧，Bug 多。放个图：</p>
<p><img data-src="https://res.aimon.cc/img/20201201201602.jpeg" alt="Window Terminal CRT"></p>
<blockquote>
<p>装逼专用配置😄</p>
</blockquote>
<h4 id="安装字体"><a href="#安装字体" class="headerlink" title="安装字体"></a>安装字体</h4><p>先安装Sarasa[更纱黑体] 字体 ，一会要使用的是Sarasa Term SC, 链接：点击 github 下载更纱黑体 嫌弃github慢的，右键这里下载在安装包找到Sarasa Term系列全部安装 安装完之后，在profiles.json文件 配置上字体 </p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&quot;profiles&quot;: &#123;</span><br><span class="line">    &quot;defaults&quot;: &#123;</span><br><span class="line">      ....</span><br><span class="line">      &quot;fontFace&quot;: &quot;Sarasa Term SC&quot;, //字体</span><br><span class="line">      &quot;fontSize&quot;: 14, //文字大小</span><br><span class="line">      ....</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="权限设置"><a href="#权限设置" class="headerlink" title="权限设置"></a>权限设置</h4><p>因为执行Install-Module会报错以下信息：因为在此系统上禁止运行脚本。有关详细信息，先以管理员权限运行windows terminal，然后执行以下命令：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">##允许执行脚本</span></span><br><span class="line"><span class="built_in">set-executionpolicy</span> remotesigned</span><br></pre></td></tr></table></figure>

<h4 id="安装模块"><a href="#安装模块" class="headerlink" title="安装模块"></a>安装模块</h4><h5 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h5><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Install-Module</span> [<span class="type">moudel</span> <span class="type">name</span>] <span class="literal">-Scope</span> CurrentUser  <span class="comment">#只为当前用户安装</span></span><br></pre></td></tr></table></figure>

<h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><p>Post-Git和Git-Aliases可以实现类似oh-my-zsh一样的Git增强(命令别名和显示分支等信息) oh-my-posh提供 了非常漂亮的主题。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Install-Module git-aliases -AllowClobber</span><br><span class="line">Install-Module posh-git</span><br><span class="line">Install-Module oh-my-posh #</span><br><span class="line">Install-Module DirColors  #让 ls (Get-ChildItem) 像 Unix 系终端一样具有多彩色</span><br></pre></td></tr></table></figure>

<p>oh-my-posh提供了10款漂亮的主题供我们选择。</p>
<p> Agnoster,Avit,Darkblood,Fish,Honukai,Paradox,PowerLine,robbyrussell,Sorin,tehrob </p>
<p>可以使用Set-Theme [主题名]配置主题</p>
<h5 id="加载模块和设置主题"><a href="#加载模块和设置主题" class="headerlink" title="加载模块和设置主题"></a>加载模块和设置主题</h5><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Import-Module</span> DirColors</span><br><span class="line"><span class="built_in">Import-Module</span> posh<span class="literal">-git</span></span><br><span class="line"><span class="built_in">Import-Module</span> <span class="built_in">oh</span><span class="literal">-my</span><span class="literal">-posh</span></span><br><span class="line"><span class="built_in">Import-Module</span> git<span class="literal">-aliases</span> <span class="literal">-DisableNameChecking</span></span><br><span class="line"><span class="built_in">Set-Theme</span> PowerLine</span><br></pre></td></tr></table></figure>

<h4 id="保存配置，永久生效"><a href="#保存配置，永久生效" class="headerlink" title="保存配置，永久生效"></a>保存配置，永久生效</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$PROFILE    # 输入此命令，$符号也要一起，查看配置文件的全路径</span><br></pre></td></tr></table></figure>

<p>正常情况 ，你会看到 C:\Users[your name]\Documents\WindowsPowerShell\Microsoft. PowerShell_profile.ps1 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">code $PROFILE  # 输入此命令,使用 vscode 打开(或创建)配置文件, notepad 也可以</span><br></pre></td></tr></table></figure>

<p>在打开的Microsoft.PowerShell_profile.ps1, 保存以下配置 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Import-Module DirColors</span><br><span class="line">Import-Module posh-git</span><br><span class="line">Import-Module oh-my-posh</span><br><span class="line">Import-Module git-aliases -DisableNameChecking</span><br><span class="line">Set-Theme PowerLine</span><br></pre></td></tr></table></figure>

<h4 id="主题颜色美化"><a href="#主题颜色美化" class="headerlink" title="主题颜色美化"></a>主题颜色美化</h4><h5 id="使用官方的colortool"><a href="#使用官方的colortool" class="headerlink" title="使用官方的colortool"></a>使用官方的colortool</h5><p>安装 colortool </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scoop install colortool</span><br></pre></td></tr></table></figure>

<blockquote>
<p>scoop 安装请参见windows 10 包管理</p>
</blockquote>
<p>colortool 的相关命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-c --current：打印当前应用方案的颜色表</span><br><span class="line">-q --quiet：使用后不要打印颜色表</span><br><span class="line">-e --errors：在控制台上报告方案分析错误</span><br><span class="line">-d --defaults：仅将方案应用于注册表中的默认值</span><br><span class="line">-b --both：将方案同时应用于当前控制台和默认控制台。</span><br><span class="line">-x --xterm：使用VT序列设置颜色。用于设置WSL中的颜色。仅适用于Windows版本&gt;=17048。</span><br><span class="line">-s --schemes：显示所有可用的方案</span><br><span class="line">-l --location：显示schemes目录的完整路径</span><br><span class="line">-v --version：显示版本号</span><br><span class="line">-o --output&lt;filename&gt;：将当前颜色表输出到文件（以.ini格式）</span><br></pre></td></tr></table></figure>

<blockquote>
<p>-是缩写，–是全写 </p>
</blockquote>
<p>使用colortool -s看到 也提供了 8 套配色方案:</p>
<ul>
<li>campbell-legacy.ini </li>
<li>campbell.ini </li>
<li>cmd-legacy.ini </li>
<li>deuteranopia.itermcolors </li>
<li>OneHalfDark.itermcolors </li>
<li>OneHalfLight.itermcolors </li>
<li>solarized_dark.itermcolors </li>
<li>solarized_light.itermcolors </li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">colortool -b OneHalfDark.itermcolors</span><br></pre></td></tr></table></figure>

<p>将OneHalfDark.itermcolors主题应用到当前控制台 ,Mac使用惯了， 你也可以来一波自定义的方案</p>
<h5 id="手动配色"><a href="#手动配色" class="headerlink" title="手动配色"></a>手动配色</h5><p>就是用iterm2的主题颜色吧，人家都已经写好了。直接使用就是了 打开 iTerm2-Color-Schemes, 找到配色的.json文件，把里面的配色复制到schemes下面就可以了。我这里选了两款Solarized的主题，</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&quot;profiles&quot;:&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;,</span><br><span class="line">&quot;schemes&quot;:[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Solarized Dark&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;black&quot;</span>: <span class="string">&quot;#002831&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;red&quot;</span>: <span class="string">&quot;#d11c24&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;green&quot;</span>: <span class="string">&quot;#738a05&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;yellow&quot;</span>: <span class="string">&quot;#a57706&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;blue&quot;</span>: <span class="string">&quot;#2176c7&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;purple&quot;</span>: <span class="string">&quot;#c61c6f&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;cyan&quot;</span>: <span class="string">&quot;#259286&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;white&quot;</span>: <span class="string">&quot;#eae3cb&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;brightBlack&quot;</span>: <span class="string">&quot;#475b62&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;brightRed&quot;</span>: <span class="string">&quot;#bd3613&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;brightGreen&quot;</span>: <span class="string">&quot;#475b62&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;brightYellow&quot;</span>: <span class="string">&quot;#536870&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;brightBlue&quot;</span>: <span class="string">&quot;#708284&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;brightPurple&quot;</span>: <span class="string">&quot;#5956ba&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;brightCyan&quot;</span>: <span class="string">&quot;#819090&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;brightWhite&quot;</span>: <span class="string">&quot;#fcf4dc&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;background&quot;</span>: <span class="string">&quot;#001e27&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;foreground&quot;</span>: <span class="string">&quot;#708284&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Solarized Darcula&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;black&quot;</span>: <span class="string">&quot;#25292a&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;red&quot;</span>: <span class="string">&quot;#f24840&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;green&quot;</span>: <span class="string">&quot;#629655&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;yellow&quot;</span>: <span class="string">&quot;#b68800&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;blue&quot;</span>: <span class="string">&quot;#2075c7&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;purple&quot;</span>: <span class="string">&quot;#797fd4&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;cyan&quot;</span>: <span class="string">&quot;#15968d&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;white&quot;</span>: <span class="string">&quot;#d2d8d9&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;brightBlack&quot;</span>: <span class="string">&quot;#25292a&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;brightRed&quot;</span>: <span class="string">&quot;#f24840&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;brightGreen&quot;</span>: <span class="string">&quot;#629655&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;brightYellow&quot;</span>: <span class="string">&quot;#b68800&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;brightBlue&quot;</span>: <span class="string">&quot;#2075c7&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;brightPurple&quot;</span>: <span class="string">&quot;#797fd4&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;brightCyan&quot;</span>: <span class="string">&quot;#15968d&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;brightWhite&quot;</span>: <span class="string">&quot;#d2d8d9&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;background&quot;</span>: <span class="string">&quot;#3d3f41&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;foreground&quot;</span>: <span class="string">&quot;#d2d8d9&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>到此美化就收工了。</p>
<h4 id="分屏-多窗格-缩放"><a href="#分屏-多窗格-缩放" class="headerlink" title="分屏/ 多窗格 / 缩放"></a>分屏/ 多窗格 / 缩放</h4><p>他可以像 Item2 一样 在同一 Tab 下 分屏，如下图： </p>
<p><img data-src="https://res.aimon.cc/img/20201201221316.jpeg" alt="多窗格"></p>
<p>分屏快捷键如下： </p>
<p>水平分屏：Alt + Shift + 减号 </p>
<p>垂直分屏：Alt + Shift + 加号 </p>
<p>切换聚焦的分屏视图：alt + (left/right/up/down) </p>
<p>调节分屏的窗口大小：alt + shift + (left/right/up/down) </p>
<p>缩放当前视图：Ctrl+ 加号/减号 （或者 Ctrl + 鼠标滚轮） </p>
<blockquote>
<p>那我不想分屏，我要删掉一个怎么办？ 这个问题问的好，直接输入exit即可退出分屏 著作权归作者所有。</p>
</blockquote>
<h4 id="PowerShell-的更新"><a href="#PowerShell-的更新" class="headerlink" title="PowerShell 的更新"></a>PowerShell 的更新</h4><p>自带的 PS 版本　是 5.0 的 ，可以升级到更高版本， 目前稳定版本为 7.x </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$PSVersionTable.PSVersion.Major   #查看Powershell版本</span><br><span class="line">$PSVersionTable.CLRVersion.Major  #查看.NET Framework版本</span><br></pre></td></tr></table></figure>

<p>在<a href="https://github.com/PowerShell/PowerShell/releases">这里</a>找到**x64.msi,下载安装即可。</p>
<h4 id="关于-ssh-的配置"><a href="#关于-ssh-的配置" class="headerlink" title="关于 ssh 的配置"></a>关于 ssh 的配置</h4><h5 id="新建-config-文件"><a href="#新建-config-文件" class="headerlink" title="新建 config 文件"></a>新建 config 文件</h5><p>在.ssh目录（就是你的.pub 默认生成位置, 通常是C:\Users[your name].ssh），新建一个config文件，没有后缀，内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Host          aliyun</span><br><span class="line">HostName      192.168.1.1</span><br><span class="line">Port          22</span><br><span class="line">User          root</span><br><span class="line">IdentityFile  C:&#x2F;Users&#x2F;[your name]&#x2F;.ssh&#x2F;id_rsa</span><br></pre></td></tr></table></figure>

<p>IdentityFile 是 ssh 的 key，你要自己生成。</p>
<h5 id="配置-profiles-json"><a href="#配置-profiles-json" class="headerlink" title="配置 profiles.json"></a>配置 profiles.json</h5><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&quot;profiles&quot;: &#123;</span><br><span class="line">  &quot;list&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;guid&quot;</span>: <span class="string">&quot;&#123;9a138488-58fc-4a7a-b3c2-3af9ba5bc7bb&#125;&quot;</span>, <span class="comment">//这个你要自己生成</span></span><br><span class="line">      <span class="attr">&quot;commandline&quot;</span>: <span class="string">&quot;ssh aliyun&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;aliyun&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;tabTitle&quot;</span>: <span class="string">&quot;aliyun-Linux&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br></pre></td></tr></table></figure>

<p><a href="https://www.guidgen.com/">在这里可以在线生成 GUID</a> </p>
<h5 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h5><p>直接执行： </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh aliyun</span><br></pre></td></tr></table></figure>

<p>这样就直接登录阿里云了。</p>
<h4 id="关于-bash-的配置"><a href="#关于-bash-的配置" class="headerlink" title="关于 bash 的配置"></a>关于 bash 的配置</h4><h5 id="环境变量配置"><a href="#环境变量配置" class="headerlink" title="环境变量配置"></a>环境变量配置</h5><p>依次打开–控制面板–系统和安全—系统—-高级系统设置, 找不到就 输命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">control system</span><br></pre></td></tr></table></figure>

<p>系统属性—高级—环境变量—系统变量，找到Path变量，编辑，新建一个，把git的bin路径加进去，(如D:\Program files\git\bin)，一路保存就可以了。</p>
<h5 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h5><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&quot;profiles&quot;: &#123;</span><br><span class="line">  &quot;list&quot;: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// Make changes here to the powershell.exe profile</span></span><br><span class="line">        <span class="attr">&quot;guid&quot;</span>: <span class="string">&quot;&#123;0caa0dad-35be-5f56-a8ff-afceeeaa6109&#125;&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;bash&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;tabTitle&quot;</span>: <span class="string">&quot;bash&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;commandline&quot;</span>: <span class="string">&quot;bash.exe&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;closeOnExit&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;fontFace&quot;</span>: <span class="string">&quot;Sarasa Term SC&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;hidden&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">&quot;snapOnInput&quot;</span>: <span class="literal">true</span>, <span class="comment">// 捕捉输入</span></span><br><span class="line">        <span class="comment">// &quot;startingDirectory&quot;: &quot;%USERPROFILE%&quot;</span></span><br><span class="line">        <span class="attr">&quot;startingDirectory&quot;</span>: <span class="string">&quot;d://Projects//dobo&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上就配置完成了，你新建 bash 标签。就可以使用 bash 了。</p>
<h4 id="鼠标右键菜单的配置"><a href="#鼠标右键菜单的配置" class="headerlink" title="鼠标右键菜单的配置"></a>鼠标右键菜单的配置</h4><p>这个需要改注册表来完成 新建一个文件wt.reg，内容如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Windows Registry Editor Version <span class="number">5.00</span></span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\Background\shell\wt]</span><br><span class="line">@=<span class="string">&quot;贾维斯,来个命令窗口&quot;</span></span><br><span class="line"><span class="string">&quot;Icon&quot;</span>=<span class="string">&quot;D:\\User\\chuchur\\OneDrive\\图片\\wt.ico&quot;</span></span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\Background\shell\wt\command]</span><br><span class="line">@=<span class="string">&quot;C:\\Users\\chuchur\\AppData\\Local\\Microsoft\\WindowsApps\\wt.exe&quot;</span></span><br></pre></td></tr></table></figure>

<p>第一个@ 是菜单项的名字，下面那个Icon 就是菜单项的图标，也可以不要，第二个@就是点击要执行的程序。 </p>
<blockquote>
<p>从商店安装的叫wt.exe， 自行编译的叫wtd.exe。 这个还是得区分下</p>
</blockquote>
<p>保存，然后双击执行wt.reg，导入注册表，就完事了。</p>
<h4 id="快捷执行方式"><a href="#快捷执行方式" class="headerlink" title="快捷执行方式"></a>快捷执行方式</h4><ol>
<li>写在以上，搞定鼠标右键 </li>
<li>Win+R 输入wt ，回车 </li>
<li>在(资源管理器)地址栏输入wt 回车</li>
</ol>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>其他</tag>
      </tags>
  </entry>
  <entry>
    <title>Typora完全使用教程</title>
    <url>/post/9eac314.html</url>
    <content><![CDATA[<h2 id="一、Typora基本语法指南"><a href="#一、Typora基本语法指南" class="headerlink" title="一、Typora基本语法指南"></a>一、Typora基本语法指南</h2><h3 id="Typora简介"><a href="#Typora简介" class="headerlink" title="Typora简介"></a>Typora简介</h3><p>Typora是一款轻便简洁的Markdown编辑器，支持即时渲染技术，这也是与其他Markdown编辑器最显著的区别。即时渲染使得你写Markdown就想是写Word文档一样流畅自如，不像其他编辑器的有编辑栏和显示栏。</p>
<ul>
<li>Typora删除了预览窗口，以及所有其他不必要的干扰。取而代之的是实时预览。</li>
<li>Markdown的语法因不同的解析器或编辑器而异，Typora使用的是GitHub Flavored Markdown。</li>
</ul>
<h3 id="Markdown介绍"><a href="#Markdown介绍" class="headerlink" title="Markdown介绍"></a>Markdown介绍</h3><ul>
<li>Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档。</li>
<li>Markdown 语言在 2004 由约翰·格鲁伯（英语：John Gruber）创建。</li>
<li>Markdown 编写的文档可以导出 HTML 、Word、图像、PDF、Epub 等多种格式的文档。</li>
<li>Markdown 编写的文档后缀为 <code>.md</code>, <code>.markdown</code>。</li>
</ul>
<h3 id="Typora基本技巧"><a href="#Typora基本技巧" class="headerlink" title="Typora基本技巧"></a>Typora基本技巧</h3><h3 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h3><ul>
<li>加粗： <code>Ctrl + B</code></li>
<li>撤销： <code>Ctrl + Z</code></li>
<li>字体倾斜 ：<code>Ctrl+I</code></li>
<li>下划线：<code>Ctrl+U</code></li>
<li>多级标题： <code>Ctrl + 1~6</code></li>
<li>有序列表：<code>Ctrl + Shift + [</code></li>
<li>无序列表：<code>Ctrl + Shift + ]</code></li>
<li>降级快捷键 ：<code>Tab</code></li>
<li>升级快捷键：<code>Shift + Tab</code></li>
<li>插入链接： <code>Ctrl + K</code></li>
<li>插入公式： <code>Ctrl + Shift + M</code></li>
<li>行内代码： <code>Ctrl + Shift + K</code></li>
<li>插入图片： <code>Ctrl + Shift + I</code></li>
<li>返回Typora顶部：<code>Ctrl+Home</code></li>
<li>返回Typora底部 ：<code>Ctrl+End</code></li>
<li>创建表格 ：<code>Ctrl+T</code></li>
<li>选中某句话 ：<code>Ctrl+L</code></li>
<li>选中某个单词 ：<code>Ctrl+D</code></li>
<li>选中相同格式的文字 ：<code>Ctrl+E</code></li>
<li>搜索: <code>Ctrl+F</code></li>
<li>搜索并替换 ：<code>Ctrl+H</code></li>
<li>删除线 ：<code>Alt+Shift+5</code></li>
<li>引用 ：<code>Ctrl+Shift+Q</code></li>
<li>生成目录：<code>[TOC]+Enter</code></li>
</ul>
<p>注：一些实体符号需要在实体符号之前加” \ ”才能够显示</p>
<h3 id="菜单"><a href="#菜单" class="headerlink" title="菜单"></a>菜单</h3><p>输入[TOC]即可产生菜单，菜单会自动更新</p>
<h3 id="区域元素"><a href="#区域元素" class="headerlink" title="区域元素"></a>区域元素</h3><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">YAML FONT Matters</span><br></pre></td></tr></table></figure>

<p>在文章的最上方输入—，按换行键产生，然后在里面输入内容即可。</p>
<h3 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h3><p>按换行键[Enter]建立新的一行,按<code>Shift</code>+<code>Enter</code>可以创建一个比段落间距更小的行间距。可在行尾插入打断线，禁止向后插入</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">打断线&lt;br/&gt;后面的内容将自动换行</span><br></pre></td></tr></table></figure>

<h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><p>开头#的个数表示，空格+文字。标题有1~6个级别，#表示开始，按换行键结束</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line"># 一级标题 快捷键为 Ctrl + 1</span><br><span class="line">## 二级标题 快捷键为 Ctrl + 2</span><br><span class="line">......</span><br><span class="line">###### 六级标题 快捷键为 Ctrl + 6</span><br></pre></td></tr></table></figure>

<h3 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h3><p>斜体以**或__括住</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">*这是斜体字体1*_这是斜体字体2_</span><br></pre></td></tr></table></figure>

<p><em>这是斜体字体1</em><br><em>这是斜体字体2</em></p>
<p>加粗<br>开头<code>**</code>，结尾<code>**</code>。<br>或者开头<code>__</code>,结尾<code>__</code>(两个短横线)。</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">**这是加粗字体1** __这是加粗字体2__</span><br></pre></td></tr></table></figure>

<p>这是加粗字体1<br>这是加粗字体2</p>
<p>删除线<br>开头<code>~~</code>，结尾<code>~~</code>。</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">~~这是错误文字~~</span><br></pre></td></tr></table></figure>

<p>这是错误文字</p>
<p>下划线使用HTML标签<u>下划线</u></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">&lt;u&gt;下划线&lt;/u&gt;</span><br></pre></td></tr></table></figure>

<p>下划线</p>
<p>高亮<br><code>==内容==</code>，需要自己在偏好设置里面打开这项功能</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">==高亮==</span><br><span class="line">高亮</span><br></pre></td></tr></table></figure>

<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>行内输入代码块快捷键： <code>Ctrl + Shift + K</code></p>
<ol>
<li>开头```+语言名，开启代码块，换行键换行，光标下移键跳出<br>示例：</li>
</ol>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">print(&quot;hello,python!&quot;&quot;)</span><br></pre></td></tr></table></figure>

<ol>
<li>用两个`在正常段落中表示代码<br>例如：</li>
</ol>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Use the `printf()`function.</span><br></pre></td></tr></table></figure>

<p>Use the <code>printf()</code>function.</p>
<h3 id="数学式"><a href="#数学式" class="headerlink" title="数学式"></a>数学式</h3><p>打开Typora选择数学模块</p>
<ul>
<li>点击“段落”—&gt;“公式块”</li>
<li>快捷键Ctrl+Shift+m</li>
<li><code>“$$”+回车</code></li>
</ul>
<p>以上三种方式都能打开数学公式的编辑栏。</p>
<p>示例：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">输入$，然后按ESC键，之后输入Tex命令，可预览</span><br><span class="line">例如：</span><br><span class="line">$\lim_&#123;x\to\infty&#125;\exp(-x)=0$</span><br></pre></td></tr></table></figure>

<p><img data-src="https://pic2.zhimg.com/80/v2-c0139796d5848b706c9f2f4d79c7a749_720w.png" alt="img"></p>
<p>下标使用~~括住内容。需要自己在偏好设置里面打开这项功能</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">H~2~O</span><br></pre></td></tr></table></figure>

<p>H2O</p>
<p>上标</p>
<p>使用^括住内容。需要自己在偏好设置里面打开这项功能</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">y^2^=4</span><br></pre></td></tr></table></figure>

<p>y2=4</p>
<h3 id="表情"><a href="#表情" class="headerlink" title="表情"></a>表情</h3><p>Typora语法支持添加emoji表情，输入不同的符号码（两个冒号包围的字符）可以显示出不同的表情。</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">以:开始，然后输入表情的英文单词,以：结尾，将直接输入该表情.例如：</span><br><span class="line">:smile</span><br><span class="line">:cry</span><br><span class="line">:happy</span><br></pre></td></tr></table></figure>

<h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><p>开头|+列名+|+列名+|+换行键，创建一个2*2表格，<code>Ctrl+Enter</code>可建立新行。</p>
<p>示例：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">|第一列|第二列|</span><br></pre></td></tr></table></figure>

<h3 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h3><p>输入 <code>***</code> 或者 <code>---</code>,按换行键换行，即可绘制一条水平线。</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">***---</span><br></pre></td></tr></table></figure>

<h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p>开头&gt;表示，空格+文字，按换行键换行，双按换行跳出</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">&gt; 引注1</span><br><span class="line">&gt; ···</span><br><span class="line">&gt; 引注2</span><br><span class="line">&gt;还有一行，双按换行键跳出引注模式</span><br></pre></td></tr></table></figure>

<p>示例：</p>
<blockquote>
<p>引注1<br>···<br>引注2还有一行，双按换行键跳出引注模式</p>
</blockquote>
<p>普通引用</p>
<blockquote>
<p>空格 + 引用文字：在引用的文字前加&gt;+空格即可，引用可以嵌套。</p>
</blockquote>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">&gt; 引用文本前使用 [大于号+空格]</span><br><span class="line">&gt; 这行可以不加，新起一行都要加上哦</span><br><span class="line">&gt;这是引用的内容</span><br><span class="line">&gt;&gt;这是引用的内容</span><br></pre></td></tr></table></figure>

<p>示例：</p>
<blockquote>
<p>引用文本前使用 [大于号+空格]这行可以不加，新起一行都要加上哦<br>这是引用的内容<br>这是引用的内容</p>
</blockquote>
<p>列表中使用</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">* 第一项   </span><br><span class="line">&gt; 引用1    </span><br><span class="line">&gt; 引用2</span><br><span class="line">* 第二项</span><br></pre></td></tr></table></figure>

<p>示例：</p>
<ul>
<li>第一项</li>
</ul>
<blockquote>
<p>引用1引用2</p>
</blockquote>
<ul>
<li>第二项</li>
</ul>
<p>引用里嵌套引用</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">&gt; 最外层引用</span><br><span class="line">&gt; &gt; 多一个 </span><br><span class="line">&gt; 嵌套一层引用</span><br><span class="line">&gt; &gt; &gt; 可以嵌套很多层</span><br></pre></td></tr></table></figure>

<p>引用里嵌套列表</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">&gt; - 这是引用里嵌套的一个列表</span><br><span class="line">&gt; - 还可以有子列表</span><br><span class="line">&gt;     * 子列表需要从 - 之后延后四个空格开始</span><br></pre></td></tr></table></figure>

<p>引用里嵌套代码块</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">&gt;     同样的，在前面加四个空格形成代码块</span><br></pre></td></tr></table></figure>
<blockquote>
<p>或者使用 ``` 形成代码块</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#96;&#96;&#96;</span><br><span class="line"></span><br><span class="line">### 脚注</span><br><span class="line"></span><br><span class="line">在需要添加脚注的文字后面+[+^+序列+]，注释的产生可以鼠标放置其上单击自动产生，添加信息</span><br><span class="line"></span><br><span class="line">或人工添加+[+^+序列+]+:</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;text</span><br><span class="line">脚注产生的方法[^footnote].</span><br><span class="line">[^footnote]:这个就是&quot;脚注&quot;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>脚注的产生方法[1]</p>
<h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p>链接<br>输入网址，单击链接，展开后可编辑<br>ctr+单击，打开链接<br>例如：<a href="https://link.zhihu.com/?target=https://www.baidu.com">https://www.baidu.com</a></p>
<p>常用链接方法</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">文字链接 [链接名称](http://链接网址)网址链接 &lt;http://链接网址&gt;</span><br></pre></td></tr></table></figure>

<p>示例效果：百度</p>
<p>超链接</p>
<p>格式1：用[ ]括住要超链接的内容，紧接着用( )括住超链接源+名字，超链接源后面+超链接命名<br>同样ctrl+单击，打开链接例如：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">这是[百度](https://www.baidu.com)官网</span><br></pre></td></tr></table></figure>

<p>这是 百度官网格式2：超链接 title可加可不加</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">This is [an example](http://example.com/ &quot;Title&quot;) inline link.</span><br><span class="line">[This link](http://example.net/) has no title attribute.</span><br></pre></td></tr></table></figure>

<p>This is an example inline link.This link has no title attribute.</p>
<p>高级链接技巧</p>
<p>使用[+超链接文字+]+[+标签+]，创建可定义链接<br>ctrl+单击，打开链接。示例1：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">这是[百度][id][id]:https://www.baidu.com</span><br></pre></td></tr></table></figure>

<p>这是百度示例2：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">这个链接用 1 作为网址变量 [Google][1].</span><br><span class="line">这个链接用 yahoo 作为网址变量 [Yahoo!][yahoo].</span><br><span class="line">然后在文档的结尾为变量赋值（网址）  </span><br><span class="line">[1]: http://www.google.com/  </span><br><span class="line">[yahoo]: http://www.yahoo.com/</span><br></pre></td></tr></table></figure>

<h3 id="URLs"><a href="#URLs" class="headerlink" title="URLs"></a>URLs</h3><p>用&lt;&gt;括住url，可手动设置url对于标准URLs，可自动识别</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">&lt;www.baidu.com&gt;</span><br></pre></td></tr></table></figure>

<p>&lt;<a href="http://www.baidu.com&gt;/">www.baidu.com&gt;</a></p>
<h3 id="序列"><a href="#序列" class="headerlink" title="序列"></a>序列</h3><p>开头*/+/- 加空格+文字，可以创建无序序列，换行键换行，删除键+shift+tab跳出<br>开头1.加空格+后接文字，可以创建有序序列例：</p>
<ul>
<li>第一个无序序列</li>
<li>第二个无序序列</li>
<li>······</li>
</ul>
<ol>
<li>第一个有序序列</li>
<li>第二个有序序列</li>
<li>······</li>
</ol>
<p>可选序列</p>
<p>开头序列+空格+[ ]+空格+文字，换行键换行，删除键+shift+tab跳出例如：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">- [ ] 第一个可选序列</span><br><span class="line">- [ ] 第二个可选序列</span><br><span class="line">- [ ] 第三个可选序列</span><br><span class="line">- [x] 第四个可选序列</span><br></pre></td></tr></table></figure>

<ul>
<li>第一个可选序列</li>
<li>第二个可选序列</li>
<li>第三个可选序列</li>
<li>第四个可选序列<br>总结：先输入减号，然后输入空格，之后就变成了黑色圆点，在输入[]，在中间加个空格，回车就可以注：任务列表无快捷键，可以点击菜单栏段落，任务列表。</li>
</ul>
<h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><blockquote>
<p>Typora文本文档中有使用图片内容，如果需要发布在各个兼容Markdown的软件平台，需要预先上传文档中的图片至图床，再通过对图床的图片链接调用，才能正常显示，否则各个平台将无法看到该文档图片。<br>免费图床网址：<a href="https://sm.ms/">https://sm.ms/</a>图床设置：[Typora图床自动上传图片设置篇]</p>
</blockquote>
<ol>
<li>手动添加：跟链接的方法区别在于前面加了个感叹号 <code>!</code>，这样是不是觉得好记多了呢？</li>
</ol>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">![图片名称](http://图片网址)</span><br></pre></td></tr></table></figure>

<ol>
<li>当然，你也可以像网址那样对图片网址使用变量</li>
</ol>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">这个链接用 1 作为网址变量 [Google][1].</span><br><span class="line">然后在文档的结尾位变量赋值（网址） </span><br><span class="line"></span><br><span class="line">[1]: http://www.google.com/logo.png</span><br></pre></td></tr></table></figure>

<ol>
<li>除了以上2种方式之外，还可以直接将图片拖拽进来，自动生成链接。</li>
</ol>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">![显示的文字](C:\Users\Hider\Desktop\echart.png &quot;图片标题&quot;)</span><br><span class="line">![显示的文字](C:\Users\Hider\Desktop\echart.png)</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="二、Typora图床设置篇章"><a href="#二、Typora图床设置篇章" class="headerlink" title="二、Typora图床设置篇章"></a>二、Typora图床设置篇章</h2><p>Typora文本文档中有使用图片内容，如果需要发布在各个兼容Markdown的软件平台，需要预先上传文档中的图片至图床，再通过对图床的图片链接调用，才能正常显示，否则各个平台将无法看到该文档图片。</p>
<blockquote>
<p>图床意义：就是专门用来存放图片，同时允许你把图片对外连接的网上空间，不少图床都是免费的。</p>
</blockquote>
<h3 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h3><p>Typora : markdown 文档写作工具</p>
<p>PicGo : 图床工具</p>
<p>七牛云/腾讯云/阿里云等</p>
<h3 id="配置流程"><a href="#配置流程" class="headerlink" title="配置流程"></a>配置流程</h3><h3 id="1-下载所需软件"><a href="#1-下载所需软件" class="headerlink" title="1. 下载所需软件"></a>1. 下载所需软件</h3><p><a href="https://typora.io/">Typora</a></p>
<p><a href="https://molunerfinn.com/PicGo/">PicGo</a></p>
<p><img data-src="https://img-blog.csdnimg.cn/20200427132148802.png" alt="image-20200427103351795"></p>
<p>安装完成如下图所示：</p>
<p><img data-src="https://img-blog.csdnimg.cn/20200427132148904.png" alt="image-20200427104505410"></p>
<p>如果无法下载可以使用以下百度云：</p>
<p>链接：<a href="https://pan.baidu.com/s/1JRDb4iojTMAV5WBFHahRaw">https://pan.baidu.com/s/1JRDb4iojTMAV5WBFHahRaw</a> 提取码：gkt9</p>
<h3 id="2-配置-PicGo"><a href="#2-配置-PicGo" class="headerlink" title="2. 配置 PicGo"></a>2. 配置 PicGo</h3><p>2.1 打开软件， 图床 -&gt; 七牛云</p>
<p><img data-src="https://img-blog.csdnimg.cn/2020042713214973.png" alt="image-20200427105128957"></p>
<p>2.2 配置七牛云图床</p>
<p><img data-src="https://img-blog.csdnimg.cn/20200427132149270.png" alt="image-20200427105207374"></p>
<p>七牛云的配置购买很简单，可以通过<a href="https://portal.qiniu.com/signup?code=1hjikucr9mmoi">以下链接</a>直接购买并使用，</p>
<p>具体配置如何购买及配置域名相关流程可以参考文章<a href="https://www.jianshu.com/p/29f33ca6e491">OpenWrite 编辑器如何配置七牛云</a></p>
<p>2.3 通过 2.2 的链接购买七牛云之后，到七牛云的界面进行配置</p>
<p><img data-src="https://img-blog.csdnimg.cn/20200427132149446.png" alt="image-20200427105806627"></p>
<p>2.4 上传文件，检验是否配置成功</p>
<p><img data-src="https://img-blog.csdnimg.cn/20200427132149620.png" alt="image-20200427110554767"></p>
<p>打开图片的URL</p>
<p><img data-src="https://img-blog.csdnimg.cn/20200427132149752.png" alt="image-20200427110655283"></p>
<p>将URL 复制到浏览器，图片能访问</p>
<p><img data-src="https://img-blog.csdnimg.cn/20200427132150279.png" alt="image-20200427110805895"></p>
<p>至此 PicGo 配置完成</p>
<h3 id="3-配置-Typora"><a href="#3-配置-Typora" class="headerlink" title="3. 配置 Typora"></a>3. 配置 Typora</h3><p>3.1 文件 -&gt; 偏好设置</p>
<p><img data-src="https://img-blog.csdnimg.cn/20200427132150429.png" alt="image-20200427104723594"></p>
<p>3.2 偏好设置 -&gt; 图像</p>
<p><img data-src="https://img-blog.csdnimg.cn/20200427132150567.png" alt="image-20200427104754064"></p>
<p>3.3 配置 PicGo 图片上传</p>
<p><img data-src="https://img-blog.csdnimg.cn/20200427132150705.png" alt="image-20200427104832421"></p>
<p><img data-src="https://img-blog.csdnimg.cn/20200427132150903.png" alt="image-20200427111638750"></p>
<p>3.4 验证 PicGo 是否成功</p>
<p><img data-src="https://img-blog.csdnimg.cn/2020042713215149.png" alt="image-20200427111338710"></p>
<p>以上所有都配置完成，可以愉快的用 Typora + PicGo 写 Markdown 文档了 </p>
]]></content>
      <categories>
        <category>typora</category>
      </categories>
      <tags>
        <tag>typora</tag>
      </tags>
  </entry>
  <entry>
    <title>测试文章</title>
    <url>/post/7a6a6b5a.html</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows Terminal实用设置和插件</title>
    <url>/post/ec878512.html</url>
    <content><![CDATA[<h4 id="Tab自动补全"><a href="#Tab自动补全" class="headerlink" title="Tab自动补全"></a>Tab自动补全</h4><p>首先，在<code>PowerShell</code>输入<code>notepad $PROFILE</code>打开自定义<code>profile</code>文件</p>
<p>添加</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Set-PSReadlineKeyHandler</span> <span class="literal">-Key</span> Tab <span class="literal">-Function</span> MenuComplete</span><br></pre></td></tr></table></figure>

<h4 id="自定义方程LSC，数列形式展示文件"><a href="#自定义方程LSC，数列形式展示文件" class="headerlink" title="自定义方程LSC，数列形式展示文件"></a>自定义方程LSC，数列形式展示文件</h4><p><code>$PROFILE</code>中添加</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">lsc</span> </span>&#123;</span><br><span class="line">    Param ([int]$c = <span class="number">5</span>)</span><br><span class="line">    ls | Format-Wide -Column $c -Property Name</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="安装PoShFuck"><a href="#安装PoShFuck" class="headerlink" title="安装PoShFuck"></a>安装PoShFuck</h4><p>安装指令</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Set-ExecutionPolicy</span> RemoteSigned</span><br><span class="line"></span><br><span class="line"><span class="built_in">iex</span> ((<span class="built_in">new-object</span> net.webclient).DownloadString(<span class="string">&#x27;https://raw.githubusercontent.com/mattparkes/PoShFuck/master/Install-TheFucker.ps1&#x27;</span>))</span><br></pre></td></tr></table></figure>

<p>打开<code>$PROFILE</code>输入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Import-Module PoShFuck</span><br></pre></td></tr></table></figure>

<h4 id="安装fzf"><a href="#安装fzf" class="headerlink" title="安装fzf"></a>安装fzf</h4><p>首先安装<code>fzf</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">choco install fzf</span><br></pre></td></tr></table></figure>

<p>安装Powershell的fzf容器：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Install-Module PSFzf</span><br></pre></td></tr></table></figure>

<p><code>$PROFILE</code>中禁用默认按键：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Remove-PSReadlineKeyHandler &#39;Ctrl+r&#39;</span><br></pre></td></tr></table></figure>

<p><code>$PROFILE</code>中启用PSFzf:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Import-Module PSFzf</span><br></pre></td></tr></table></figure>

<h4 id="设置完毕后Profile总览"><a href="#设置完毕后Profile总览" class="headerlink" title="设置完毕后Profile总览"></a>设置完毕后Profile总览</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Disable default keys</span><br><span class="line">Remove-PSReadlineKeyHandler &#39;Ctrl+r&#39;</span><br><span class="line"></span><br><span class="line"># Import Modules</span><br><span class="line">Import-Module posh-git</span><br><span class="line">Import-Module oh-my-posh</span><br><span class="line">Import-Module PSFzf</span><br><span class="line">Import-Module PoShFuck</span><br><span class="line"></span><br><span class="line"># Set Theme</span><br><span class="line">Set-Theme Paradox</span><br><span class="line"></span><br><span class="line"># Set MenuComplete</span><br><span class="line">Set-PSReadlineKeyHandler -Key Tab -Function MenuComplete</span><br><span class="line"></span><br><span class="line"># Alias Command 可以创建你自己喜欢的别名</span><br><span class="line">Set-Alias -Name n -Value nvim</span><br><span class="line"></span><br><span class="line"># Alias Software 可以创建你自己喜欢的别名</span><br><span class="line">Set-Alias -Name vscode -Value &quot;C:\Users\langc\AppData\Local\Programs\Microsoft VS Code\Code.exe&quot;</span><br><span class="line"></span><br><span class="line"># Customized Functions</span><br><span class="line">function lsc &#123;</span><br><span class="line">   Param ([int]$c &#x3D; 5)</span><br><span class="line">   ls | Format-Wide -Column $c -Property Name</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>其他</tag>
      </tags>
  </entry>
  <entry>
    <title>Asp.Net Core中JWT刷新Token解决方案</title>
    <url>/post/13860cc7.html</url>
    <content><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p><strong>1.关于JWT的Token过期问题,到底设置多久过期？</strong></p>
<p>(1).有的人设置过期时间很长，比如一个月，甚至更长，等到过期了退回登录页面,重新登录重新获取token，期间登录的时候也是重新获取token，然后过期时间又重置为了1个月。这样一旦token被人截取，就可能被人长期使用，如果你想禁止，只能修改token颁发的密钥，这样就会导致所有token都失效，显然不太可取。</p>
<p>(2).有的人设置比较短，比如10分钟，在使用过程中，一旦过期也是退回登录页面，这样就可能使用过程中经常退回登录页面，体验很不好。</p>
<p><strong>2. 这里介绍一种比较主流的解决方案—双Token机制</strong></p>
<p>(1).访问令牌：accessToken，访问接口是需要携带的，也就是我们之前一直使用的那个，过期时间一般设置比较短，根据实际项目分析，比如：10分钟</p>
<p>(2).刷新令牌：refreshToken，当accessToken过期后，用于获取新的accessToken的时候使用，过期时间一般设置的比较长，比如：7天</p>
<p><strong>3.获取新的accessToken的时候, 为什么还需要传入旧accessToken，只传入refreshToken不行么？</strong></p>
<p> 仔细看下面的解决思路，只传入refreshToken也可以，但是传入双Token安全性更高一些。</p>
<h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><ol>
<li>登录请求过来，将userId和userAccount存到payLoad中，设置不同的过期时间，分别生成accessToken和refreshToken，二者的区别密钥不一样，过期时间不一样，然后把 生成refreshToken的相关信息存到对应的表中【id，userId，token，expire】，一个用户对应一条记录（也可以存到Redis中，这里为了测试，存在一个全局变量中）， 每次登录的时候，添加或者更新记录，最后将双Token返回给前端，前端存到LocalStorage中。</li>
</ol>
<p><img data-src="https://res.aimon.cc/img/20201202143643.png" alt="img"></p>
<p><img data-src="https://res.aimon.cc/img/20201202143743.png" alt="img"></p>
<ol start="2">
<li>前端访问GetMsg获取信息接口，表头需要携带accessToken，服务器端通过JwtCheck2过滤器进行校验，验证通过则正常访问，如果不通过返回401和不通过的原因，前端在Error中进行获取,这里区分造成401的原因。</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取信息接口</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">GetMsg</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> accessToken = <span class="built_in">window</span>.localStorage.getItem(<span class="string">&quot;accessToken&quot;</span>);      </span><br><span class="line">            $.ajax(&#123;</span><br><span class="line">                url: <span class="string">&quot;/Home/GetMsg&quot;</span>,</span><br><span class="line">                type: <span class="string">&quot;Post&quot;</span>,</span><br><span class="line">                data: &#123;&#125;,</span><br><span class="line">                datatype: <span class="string">&quot;json&quot;</span>,</span><br><span class="line">                beforeSend: <span class="function"><span class="keyword">function</span> (<span class="params">xhr</span>) </span>&#123;</span><br><span class="line">                    xhr.setRequestHeader(<span class="string">&quot;Authorization&quot;</span>, <span class="string">&quot;Bearer &quot;</span> + accessToken);</span><br><span class="line">                &#125;,</span><br><span class="line">                success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (data.status == <span class="string">&quot;ok&quot;</span>) &#123;</span><br><span class="line">                        alert(data.msg);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        alert(data.msg);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="comment">//当安全校验未通过的时候进入这里</span></span><br><span class="line">                error: <span class="function"><span class="keyword">function</span> (<span class="params">xhr</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (xhr.status == <span class="number">401</span>) &#123;</span><br><span class="line">                        <span class="keyword">var</span> errorMsg = xhr.responseText;</span><br><span class="line">                        <span class="built_in">console</span>.log(errorMsg);</span><br><span class="line">                        <span class="comment">//alert(errorMsg);</span></span><br><span class="line">                        <span class="keyword">if</span> (errorMsg == <span class="string">&quot;expired&quot;</span>) &#123;</span><br><span class="line">                            <span class="comment">//表示过期，需要自动刷新</span></span><br><span class="line">                            GetTokenAgain(GetMsg);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="comment">//表示是非法请求，给出提示，可以直接退回登录页</span></span><br><span class="line">                            alert(<span class="string">&quot;非法请求&quot;</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>如果是表头为空、校验错误等等，则直接提示请求非法，返回登录页。</li>
</ol>
<p><img data-src="https://res.aimon.cc/img/20201202143835.png" alt="img"></p>
<ol start="4">
<li>如果捕获的是expired即过期，则调用GetTokenAgain(func)方法，即重新获取accessToken和refreshToken，这里func代表传递进来一个方法名，以便调用成功后重新调用原方法，实现无缝刷新； 向服务器端传递 双Token， 服务器端的验证逻辑如下：</li>
</ol>
<p>(1). 先通过纯代码校验refreshToken的物理合法性,如果非法，前端直接报错，返回到登录页面。</p>
<p>(2). 从accessToken中解析出来userId等其它数据(即使accessToken已经过期，依旧可以解析出来)</p>
<p>(3). 拿着userId、refreshToken、当前时间去RefreshToken表中查数据，如果查不到，直接返回前端保存，返回到登录页面。</p>
<p>(4). 如果能查到，重新生成 accessToken和refreshToken，并写入RefreshToken表</p>
<p>(5). 向前端返回双token，前端进行覆盖存储，然后自动调用原方法，携带新的accessToken，进行访问，从而实现无缝刷新token的问题。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//重新获取访问令牌和刷新令牌</span></span><br><span class="line">       <span class="function"><span class="keyword">function</span> <span class="title">GetTokenAgain</span>(<span class="params">func</span>) </span>&#123;</span><br><span class="line">           <span class="keyword">var</span> model = &#123;</span><br><span class="line">               accessToken: <span class="built_in">window</span>.localStorage.getItem(<span class="string">&quot;accessToken&quot;</span>),</span><br><span class="line">               refreshToken: <span class="built_in">window</span>.localStorage.getItem(<span class="string">&quot;refreshToken&quot;</span>)</span><br><span class="line">           &#125;;</span><br><span class="line">           $.ajax(&#123;</span><br><span class="line">               url: <span class="string">&#x27;/Home/UpdateAccessToken&#x27;</span>,</span><br><span class="line">               type: <span class="string">&quot;POST&quot;</span>,</span><br><span class="line">               dataType: <span class="string">&quot;json&quot;</span>,</span><br><span class="line">               data: model,</span><br><span class="line">               success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">                   <span class="keyword">if</span> (data.status == <span class="string">&quot;error&quot;</span>) &#123;</span><br><span class="line">                       <span class="keyword">debugger</span>;</span><br><span class="line">                       <span class="comment">// 表示重新获取令牌失败，可以退回登录页</span></span><br><span class="line">                       alert(<span class="string">&quot;重新获取令牌失败&quot;</span>);</span><br><span class="line"></span><br><span class="line">                   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                       <span class="built_in">window</span>.localStorage.setItem(<span class="string">&quot;accessToken&quot;</span>, data.data.accessToken);</span><br><span class="line">                       <span class="built_in">window</span>.localStorage.setItem(<span class="string">&quot;refreshToken&quot;</span>, data.data.refreshToken);</span><br><span class="line">                       func();</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;);</span><br></pre></td></tr></table></figure>

<p><strong>PS：以上方案，适用于单个页面发送单个ajax请求，如果是多个请求，有顺序的发送，比如第一个发送完，然后再发送第二个，这种场景是没问题的。</strong></p>
<p><strong>但是，特殊情况如果一个页面多个ajax并行的过来了，如果其中有一个accessToken过期了，那么它会走更新token的机制，这时候refreshToken和accessToken都更新了（数据库中refreshToken也更新了），会导致刚才同时进来的其它ajax的refreshToken验证不过，从而无法刷新双token。</strong></p>
<p><strong>针对这种特殊情况，作为取舍，更新accessToken的方法中，不更新refreshToken， 那么refreshToken过期，本来也是要进入 登录页的，所以针对这类情况，这种取舍也无可厚非。</strong></p>
<p>下面分享完整版代码：</p>
<p>前端代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">@&#123;</span><br><span class="line">    Layout = null;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Index<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;~/lib/jquery/dist/jquery.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">&#x27;#btn1&#x27;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line">                Login();</span><br><span class="line">            &#125;);</span><br><span class="line"><span class="javascript">            $(<span class="string">&#x27;#btn2&#x27;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line">                GetMsg();</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="comment">//登录接口</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">Login</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            $.ajax(&#123;</span></span><br><span class="line"><span class="javascript">                url: <span class="string">&quot;/Home/CheckLogin&quot;</span>,</span></span><br><span class="line"><span class="javascript">                type: <span class="string">&quot;Post&quot;</span>,</span></span><br><span class="line"><span class="javascript">                data: &#123; <span class="attr">userAccount</span>: <span class="string">&quot;admin&quot;</span>, <span class="attr">userPwd</span>: <span class="string">&quot;123456&quot;</span> &#125;,</span></span><br><span class="line"><span class="javascript">                datatype: <span class="string">&quot;json&quot;</span>,</span></span><br><span class="line"><span class="javascript">                success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">if</span> (data.status == <span class="string">&quot;ok&quot;</span>) &#123;</span></span><br><span class="line">                        alert(data.msg);</span><br><span class="line"><span class="javascript">                        <span class="built_in">console</span>.log(data.data.accessToken);</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">console</span>.log(data.data.refreshToken);</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">window</span>.localStorage.setItem(<span class="string">&quot;accessToken&quot;</span>, data.data.accessToken);</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">window</span>.localStorage.setItem(<span class="string">&quot;refreshToken&quot;</span>, data.data.refreshToken);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">                    &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line">                        alert(data.msg);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line"><span class="javascript">                <span class="comment">//当安全校验未通过的时候进入这里</span></span></span><br><span class="line"><span class="javascript">                error: <span class="function"><span class="keyword">function</span> (<span class="params">xhr</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">if</span> (xhr.status == <span class="number">401</span>) &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">console</span>.log(xhr.responseText);</span></span><br><span class="line">                        alert(xhr.responseText)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="comment">//获取信息接口</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">GetMsg</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> accessToken = <span class="built_in">window</span>.localStorage.getItem(<span class="string">&quot;accessToken&quot;</span>);</span></span><br><span class="line"><span class="javascript">            $.ajax(&#123;</span></span><br><span class="line"><span class="javascript">                url: <span class="string">&quot;/Home/GetMsg&quot;</span>,</span></span><br><span class="line"><span class="javascript">                type: <span class="string">&quot;Post&quot;</span>,</span></span><br><span class="line">                data: &#123;&#125;,</span><br><span class="line"><span class="javascript">                datatype: <span class="string">&quot;json&quot;</span>,</span></span><br><span class="line"><span class="javascript">                beforeSend: <span class="function"><span class="keyword">function</span> (<span class="params">xhr</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    xhr.setRequestHeader(<span class="string">&quot;Authorization&quot;</span>, <span class="string">&quot;Bearer &quot;</span> + accessToken);</span></span><br><span class="line">                &#125;,</span><br><span class="line"><span class="javascript">                success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">if</span> (data.status == <span class="string">&quot;ok&quot;</span>) &#123;</span></span><br><span class="line">                        alert(data.msg);</span><br><span class="line"><span class="javascript">                    &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line">                        alert(data.msg);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line"><span class="javascript">                <span class="comment">//当安全校验未通过的时候进入这里</span></span></span><br><span class="line"><span class="javascript">                error: <span class="function"><span class="keyword">function</span> (<span class="params">xhr</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">if</span> (xhr.status == <span class="number">401</span>) &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">var</span> errorMsg = xhr.responseText;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">console</span>.log(errorMsg);</span></span><br><span class="line"><span class="javascript">                        <span class="comment">//alert(errorMsg);</span></span></span><br><span class="line"><span class="javascript">                        <span class="keyword">if</span> (errorMsg == <span class="string">&quot;expired&quot;</span>) &#123;</span></span><br><span class="line"><span class="javascript">                            <span class="comment">//表示过期，需要自动刷新</span></span></span><br><span class="line">                            GetTokenAgain(GetMsg);</span><br><span class="line"><span class="javascript">                        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                            <span class="comment">//表示是非法请求，给出提示，可以直接退回登录页</span></span></span><br><span class="line"><span class="javascript">                            alert(<span class="string">&quot;非法请求&quot;</span>);</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="comment">//重新获取访问令牌和刷新令牌</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">GetTokenAgain</span>(<span class="params">func</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> model = &#123;</span></span><br><span class="line"><span class="javascript">                accessToken: <span class="built_in">window</span>.localStorage.getItem(<span class="string">&quot;accessToken&quot;</span>),</span></span><br><span class="line"><span class="javascript">                refreshToken: <span class="built_in">window</span>.localStorage.getItem(<span class="string">&quot;refreshToken&quot;</span>)</span></span><br><span class="line">            &#125;;</span><br><span class="line"><span class="javascript">            $.ajax(&#123;</span></span><br><span class="line"><span class="javascript">                url: <span class="string">&#x27;/Home/UpdateAccessToken&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                type: <span class="string">&quot;POST&quot;</span>,</span></span><br><span class="line"><span class="javascript">                dataType: <span class="string">&quot;json&quot;</span>,</span></span><br><span class="line">                data: model,</span><br><span class="line"><span class="javascript">                success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">if</span> (data.status == <span class="string">&quot;error&quot;</span>) &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">debugger</span>;</span></span><br><span class="line"><span class="javascript">                        <span class="comment">// 表示重新获取令牌失败，可以退回登录页</span></span></span><br><span class="line"><span class="javascript">                        alert(<span class="string">&quot;重新获取令牌失败&quot;</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">                    &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">window</span>.localStorage.setItem(<span class="string">&quot;accessToken&quot;</span>, data.data.accessToken);</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">window</span>.localStorage.setItem(<span class="string">&quot;refreshToken&quot;</span>, data.data.refreshToken);</span></span><br><span class="line">                        func();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn1&quot;</span>&gt;</span>模拟登陆逻辑<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn2&quot;</span>&gt;</span>获取系统信息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>服务器端代码1：</p>
<p><strong>（PS：如果有上面提到的特殊情况，则去掉更新机制中 4.2和4.3的代码）</strong></p>
<p>相关接口</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">HomeController</span> : <span class="title">Controller</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="title">List</span>&lt;<span class="title">RefreshToken</span>&gt; rTokenList</span> = <span class="keyword">new</span> List&lt;RefreshToken&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> IConfiguration _Configuration &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HomeController</span>(<span class="params">IConfiguration Configuration</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">this</span>._Configuration = Configuration;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 测试页面</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IActionResult <span class="title">Index</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">return</span> View();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 校验登录</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;userAccount&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;userPwd&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    [<span class="meta">HttpPost</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> IActionResult <span class="title">CheckLogin</span>(<span class="params"><span class="built_in">string</span> userAccount, <span class="built_in">string</span> userPwd</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (userAccount == <span class="string">&quot;admin&quot;</span> &amp;&amp; userPwd == <span class="string">&quot;123456&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">string</span> AccessTokenKey = _Configuration[<span class="string">&quot;AccessTokenKey&quot;</span>];</span><br><span class="line">            <span class="built_in">string</span> RefreshTokenKey = _Configuration[<span class="string">&quot;RefreshTokenKey&quot;</span>];</span><br><span class="line"></span><br><span class="line">            <span class="comment">//1.先去数据库中吧userId查出来</span></span><br><span class="line">            <span class="built_in">string</span> userId = <span class="string">&quot;001&quot;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//2. 生成accessToken</span></span><br><span class="line">            <span class="comment">//过期时间(下面表示签名后 5分钟过期，这里设置20s为了演示)</span></span><br><span class="line">            <span class="built_in">double</span> exp = (DateTime.UtcNow.AddSeconds(<span class="number">20</span>) - <span class="keyword">new</span> DateTime(<span class="number">1970</span>, <span class="number">1</span>, <span class="number">1</span>)).TotalSeconds;</span><br><span class="line">            <span class="keyword">var</span> payload = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">object</span>&gt;</span><br><span class="line">                     &#123;</span><br><span class="line">                          &#123;<span class="string">&quot;userId&quot;</span>, userId &#125;,</span><br><span class="line">                          &#123;<span class="string">&quot;userAccount&quot;</span>, userAccount &#125;,</span><br><span class="line">                          &#123;<span class="string">&quot;exp&quot;</span>,exp &#125;</span><br><span class="line">                     &#125;;</span><br><span class="line">            <span class="keyword">var</span> accessToken = JWTHelp.JWTJiaM(payload, AccessTokenKey);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//3.生成refreshToken</span></span><br><span class="line">            <span class="comment">//过期时间(可以不设置，下面表示 2天过期)</span></span><br><span class="line">            <span class="keyword">var</span> expireTime = DateTime.Now.AddDays(<span class="number">2</span>);</span><br><span class="line">            <span class="built_in">double</span> exp2 = (expireTime - <span class="keyword">new</span> DateTime(<span class="number">1970</span>, <span class="number">1</span>, <span class="number">1</span>)).TotalSeconds;</span><br><span class="line">            <span class="keyword">var</span> payload2 = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">object</span>&gt;</span><br><span class="line">                     &#123;</span><br><span class="line">                          &#123;<span class="string">&quot;userId&quot;</span>, userId &#125;,</span><br><span class="line">                          &#123;<span class="string">&quot;userAccount&quot;</span>, userAccount &#125;,</span><br><span class="line">                          &#123;<span class="string">&quot;exp&quot;</span>,exp2 &#125;</span><br><span class="line">                     &#125;;</span><br><span class="line">            <span class="keyword">var</span> refreshToken = JWTHelp.JWTJiaM(payload2, RefreshTokenKey);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//4.将生成refreshToken的原始信息存到数据库/Redis中 （这里暂时存到一个全局变量中）</span></span><br><span class="line">            <span class="comment">//先查询有没有，有则更新，没有则添加</span></span><br><span class="line">            <span class="keyword">var</span> RefreshTokenItem = rTokenList.Where(u =&gt; u.userId == userId).FirstOrDefault();</span><br><span class="line">            <span class="keyword">if</span> (RefreshTokenItem == <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                RefreshToken rItem = <span class="keyword">new</span> RefreshToken()</span><br><span class="line">                &#123;</span><br><span class="line">                    id = Guid.NewGuid().ToString(<span class="string">&quot;N&quot;</span>),</span><br><span class="line">                    userId = userId,</span><br><span class="line">                    expire = expireTime,</span><br><span class="line">                    Token = refreshToken</span><br><span class="line">                &#125;;</span><br><span class="line">                rTokenList.Add(rItem);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                RefreshTokenItem.Token = refreshToken;</span><br><span class="line">                RefreshTokenItem.expire = expireTime;   <span class="comment">//要和前面生成的过期时间相匹配</span></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> Json(<span class="keyword">new</span></span><br><span class="line">            &#123;</span><br><span class="line">                status = <span class="string">&quot;ok&quot;</span>,</span><br><span class="line">                msg = <span class="string">&quot;登录成功&quot;</span>,</span><br><span class="line">                data = <span class="keyword">new</span></span><br><span class="line">                &#123;</span><br><span class="line">                    accessToken,</span><br><span class="line">                    refreshToken</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> Json(<span class="keyword">new</span></span><br><span class="line">            &#123;</span><br><span class="line">                status = <span class="string">&quot;error&quot;</span>,</span><br><span class="line">                msg = <span class="string">&quot;登录失败&quot;</span>,</span><br><span class="line">                data = <span class="keyword">new</span> &#123; &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 获取系统信息接口</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    [<span class="meta">TypeFilter(typeof(JwtCheck2))</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> IActionResult <span class="title">GetMsg</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="built_in">string</span> msg = <span class="string">&quot;windows10&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> Json(<span class="keyword">new</span> &#123; status = <span class="string">&quot;ok&quot;</span>, msg = msg &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 更新访问令牌(同时也更新刷新令牌)</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IActionResult <span class="title">UpdateAccessToken</span>(<span class="params"><span class="built_in">string</span> accessToken, <span class="built_in">string</span> refreshToken</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">string</span> AccessTokenKey = _Configuration[<span class="string">&quot;AccessTokenKey&quot;</span>];</span><br><span class="line">        <span class="built_in">string</span> RefreshTokenKey = _Configuration[<span class="string">&quot;RefreshTokenKey&quot;</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.先通过纯代码校验refreshToken的物理合法性</span></span><br><span class="line">        <span class="keyword">var</span> result = JWTHelp.JWTJieM(refreshToken, _Configuration[<span class="string">&quot;RefreshTokenKey&quot;</span>]);</span><br><span class="line">        <span class="keyword">if</span> (result == <span class="string">&quot;expired&quot;</span> || result == <span class="string">&quot;invalid&quot;</span> || result == <span class="string">&quot;error&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> Json(<span class="keyword">new</span> &#123; status = <span class="string">&quot;error&quot;</span>, data = <span class="string">&quot;&quot;</span> &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.从accessToken中解析出来userId等其它数据(即使accessToken已经过期，依旧可以解析出来)</span></span><br><span class="line">        JwtData myJwtData = JsonConvert.DeserializeObject&lt;JwtData&gt;(<span class="keyword">this</span>.Base64UrlDecode(accessToken.Split(<span class="string">&#x27;.&#x27;</span>)[<span class="number">1</span>]));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 拿着userId、refreshToken、当前时间去RefreshToken表中查数据</span></span><br><span class="line">        <span class="keyword">var</span> rTokenItem = rTokenList.Where(u =&gt; u.userId == myJwtData.userId &amp;&amp; u.Token == refreshToken &amp;&amp; u.expire &gt; DateTime.Now).FirstOrDefault();</span><br><span class="line">        <span class="keyword">if</span> (rTokenItem == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> Json(<span class="keyword">new</span> &#123; status = <span class="string">&quot;error&quot;</span>, data = <span class="string">&quot;&quot;</span> &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.重新生成 accessToken和refreshToken，并写入RefreshToken表</span></span><br><span class="line">        <span class="comment">//4.1. 生成accessToken</span></span><br><span class="line">        <span class="comment">//过期时间(下面表示签名后 5分钟过期，这里设置20s为了演示)</span></span><br><span class="line">        <span class="built_in">double</span> exp = (DateTime.UtcNow.AddSeconds(<span class="number">20</span>) - <span class="keyword">new</span> DateTime(<span class="number">1970</span>, <span class="number">1</span>, <span class="number">1</span>)).TotalSeconds;</span><br><span class="line">        <span class="keyword">var</span> payload = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">object</span>&gt;</span><br><span class="line">                     &#123;</span><br><span class="line">                          &#123;<span class="string">&quot;userId&quot;</span>, myJwtData.userId &#125;,</span><br><span class="line">                          &#123;<span class="string">&quot;userAccount&quot;</span>, myJwtData.userAccount &#125;,</span><br><span class="line">                          &#123;<span class="string">&quot;exp&quot;</span>,exp &#125;</span><br><span class="line">                     &#125;;</span><br><span class="line">        <span class="keyword">var</span> MyAccessToken = JWTHelp.JWTJiaM(payload, AccessTokenKey);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.2.生成refreshToken</span></span><br><span class="line">        <span class="comment">//过期时间(可以不设置，下面表示签名后 2天过期)</span></span><br><span class="line">        <span class="keyword">var</span> expireTime = DateTime.Now.AddDays(<span class="number">2</span>);</span><br><span class="line">        <span class="built_in">double</span> exp2 = (expireTime - <span class="keyword">new</span> DateTime(<span class="number">1970</span>, <span class="number">1</span>, <span class="number">1</span>)).TotalSeconds;</span><br><span class="line">        <span class="keyword">var</span> payload2 = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">object</span>&gt;</span><br><span class="line">                     &#123;</span><br><span class="line">                          &#123;<span class="string">&quot;userId&quot;</span>, myJwtData.userId &#125;,</span><br><span class="line">                          &#123;<span class="string">&quot;userAccount&quot;</span>, myJwtData.userAccount &#125;,</span><br><span class="line">                          &#123;<span class="string">&quot;exp&quot;</span>,exp2 &#125;</span><br><span class="line">                     &#125;;</span><br><span class="line">        <span class="keyword">var</span> MyRefreshToken = JWTHelp.JWTJiaM(payload2, RefreshTokenKey);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.3 更新refreshToken表</span></span><br><span class="line">        rTokenItem.Token = MyRefreshToken;</span><br><span class="line">        rTokenItem.expire = expireTime;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//5. 返回双Token</span></span><br><span class="line">        <span class="keyword">return</span> Json(<span class="keyword">new</span></span><br><span class="line">        &#123;</span><br><span class="line">            status = <span class="string">&quot;ok&quot;</span>,</span><br><span class="line">            data = <span class="keyword">new</span></span><br><span class="line">            &#123;</span><br><span class="line">                accessToken = MyAccessToken,</span><br><span class="line">                refreshToken = MyRefreshToken</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> Base64解码</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;base64UrlStr&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">Base64UrlDecode</span>(<span class="params"><span class="built_in">string</span> base64UrlStr</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        base64UrlStr = base64UrlStr.Replace(<span class="string">&#x27;-&#x27;</span>, <span class="string">&#x27;+&#x27;</span>).Replace(<span class="string">&#x27;_&#x27;</span>, <span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">        <span class="keyword">switch</span> (base64UrlStr.Length % <span class="number">4</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                base64UrlStr += <span class="string">&quot;==&quot;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                base64UrlStr += <span class="string">&quot;=&quot;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> bytes = Convert.FromBase64String(base64UrlStr);</span><br><span class="line">        <span class="keyword">return</span> Encoding.UTF8.GetString(bytes);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> 服务器端代码2：</p>
<p>JWT帮助类</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> Jwt的加密和解密</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 注：加密和加密用的是用一个密钥</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 依赖程序集：【JWT】</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">JWTHelp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> JWT加密算法</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;payload&quot;&gt;</span>负荷部分，存储使用的信息<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;secret&quot;&gt;</span>密钥<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;extraHeaders&quot;&gt;</span>存放表头额外的信息,不需要的话可以不传<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">JWTJiaM</span>(<span class="params">IDictionary&lt;<span class="built_in">string</span>, <span class="built_in">object</span>&gt; payload, <span class="built_in">string</span> secret, IDictionary&lt;<span class="built_in">string</span>, <span class="built_in">object</span>&gt; extraHeaders = <span class="literal">null</span></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        IJwtAlgorithm algorithm = <span class="keyword">new</span> HMACSHA256Algorithm();</span><br><span class="line">        IJsonSerializer serializer = <span class="keyword">new</span> JsonNetSerializer();</span><br><span class="line">        IBase64UrlEncoder urlEncoder = <span class="keyword">new</span> JwtBase64UrlEncoder();</span><br><span class="line">        IJwtEncoder encoder = <span class="keyword">new</span> JwtEncoder(algorithm, serializer, urlEncoder);</span><br><span class="line">        <span class="keyword">var</span> token = encoder.Encode(payload, secret);</span><br><span class="line">        <span class="keyword">return</span> token;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> JWT解密算法</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;token&quot;&gt;</span>需要解密的token串<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;secret&quot;&gt;</span>密钥<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">JWTJieM</span>(<span class="params"><span class="built_in">string</span> token, <span class="built_in">string</span> secret</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            IJsonSerializer serializer = <span class="keyword">new</span> JsonNetSerializer();</span><br><span class="line">            IDateTimeProvider provider = <span class="keyword">new</span> UtcDateTimeProvider();</span><br><span class="line">            IJwtValidator validator = <span class="keyword">new</span> JwtValidator(serializer, provider);</span><br><span class="line">            IBase64UrlEncoder urlEncoder = <span class="keyword">new</span> JwtBase64UrlEncoder();</span><br><span class="line">            IJwtDecoder decoder = <span class="keyword">new</span> JwtDecoder(serializer, validator, urlEncoder);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> json = decoder.Decode(token, secret, <span class="literal">true</span>);</span><br><span class="line">            <span class="comment">//校验通过，返回解密后的字符串</span></span><br><span class="line">            <span class="keyword">return</span> json;</span><br><span class="line">        &#125;</span><br><span class="line">        catch (TokenExpiredException)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//表示过期</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;expired&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        catch (SignatureVerificationException)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//表示验证不通过</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;invalid&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        catch (Exception)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;error&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> 服务器端代码3：</p>
<p>实体类</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">RefreshToken</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//主键</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="comment">//用户编号</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> userId &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="comment">//refreshToken</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Token &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="comment">//过期时间</span></span><br><span class="line">    <span class="keyword">public</span> DateTime expire &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">JwtData</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> DateTime expire &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;  <span class="comment">//代表过期时间</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> userId &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> userAccount &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>过滤器代码：</p>
<p>View Code</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> Bearer认证,返回ajax中的error</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 校验访问令牌的合法性</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">JwtCheck2</span> : <span class="title">ActionFilterAttribute</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> IConfiguration _configuration;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JwtCheck2</span>(<span class="params">IConfiguration configuration</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        _configuration = configuration;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> action执行前执行</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;context&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnActionExecuting</span>(<span class="params">ActionExecutingContext context</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="comment">//1.判断是否需要校验</span></span><br><span class="line">        <span class="keyword">var</span> isSkip = context.ActionDescriptor.EndpointMetadata.Any(x =&gt; x.GetType() == <span class="keyword">typeof</span>(SkipAttribute));</span><br><span class="line">        <span class="keyword">if</span> (isSkip == <span class="literal">false</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//2. 判断是什么请求(ajax or 非ajax)</span></span><br><span class="line">            <span class="keyword">var</span> actionContext = context.HttpContext;</span><br><span class="line">            <span class="keyword">if</span> (IsAjaxRequest(actionContext.Request))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//表示是ajax</span></span><br><span class="line">                <span class="keyword">var</span> token = context.HttpContext.Request.Headers[<span class="string">&quot;Authorization&quot;</span>].ToString();    <span class="comment">//ajax请求传过来</span></span><br><span class="line">                <span class="built_in">string</span> pattern = <span class="string">&quot;^Bearer (.*?)$&quot;</span>;</span><br><span class="line">                <span class="keyword">if</span> (!Regex.IsMatch(token, pattern))</span><br><span class="line">                &#123;</span><br><span class="line">                    context.Result = <span class="keyword">new</span> ContentResult &#123; StatusCode = <span class="number">401</span>, Content = <span class="string">&quot;token格式不对!格式为:Bearer &#123;token&#125;&quot;</span> &#125;;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                token = Regex.Match(token, pattern).Groups[<span class="number">1</span>]?.ToString();</span><br><span class="line">                <span class="keyword">if</span> (token == <span class="string">&quot;null&quot;</span> || <span class="built_in">string</span>.IsNullOrEmpty(token))</span><br><span class="line">                &#123;</span><br><span class="line">                    context.Result = <span class="keyword">new</span> ContentResult &#123; StatusCode = <span class="number">401</span>, Content = <span class="string">&quot;token不能为空&quot;</span> &#125;;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//校验auth的正确性</span></span><br><span class="line">                <span class="keyword">var</span> result = JWTHelp.JWTJieM(token, _configuration[<span class="string">&quot;AccessTokenKey&quot;</span>]);</span><br><span class="line">                <span class="keyword">if</span> (result == <span class="string">&quot;expired&quot;</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    context.Result = <span class="keyword">new</span> ContentResult &#123; StatusCode = <span class="number">401</span>, Content = <span class="string">&quot;expired&quot;</span> &#125;;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (result == <span class="string">&quot;invalid&quot;</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    context.Result = <span class="keyword">new</span> ContentResult &#123; StatusCode = <span class="number">401</span>, Content = <span class="string">&quot;invalid&quot;</span> &#125;;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (result == <span class="string">&quot;error&quot;</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    context.Result = <span class="keyword">new</span> ContentResult &#123; StatusCode = <span class="number">401</span>, Content = <span class="string">&quot;error&quot;</span> &#125;;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//表示校验通过,用于向控制器中传值</span></span><br><span class="line">                    context.RouteData.Values.Add(<span class="string">&quot;auth&quot;</span>, result);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//表示是非ajax请求，则auth拼接在参数中传过来</span></span><br><span class="line">                context.Result = <span class="keyword">new</span> RedirectResult(<span class="string">&quot;/Home/NoPerIndex?reason=null&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 判断该请求是否是ajax请求</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;request&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="built_in">bool</span> <span class="title">IsAjaxRequest</span>(<span class="params">HttpRequest request</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="built_in">string</span> header = request.Headers[<span class="string">&quot;X-Requested-With&quot;</span>];</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;XMLHttpRequest&quot;</span>.Equals(header);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p> 　将accessToken的过期时间设置为20s，点击登录授权后，等待20s，然后点击获取信息按钮，依旧能获取信息，无缝衔接，进行了双token的更新。</p>
<p> <img data-src="https://res.aimon.cc/img/20201202143924.png" alt="img"></p>
<p><img data-src="https://res.aimon.cc/img/20201202143937.png" alt="img"></p>
<blockquote>
<p> 转自 <a href="https://www.cnblogs.com/yaopengfei/p/12449213.html">https://www.cnblogs.com/yaopengfei/p/12449213.html</a></p>
</blockquote>
]]></content>
      <categories>
        <category>coding</category>
        <category>c#</category>
      </categories>
      <tags>
        <tag>c#</tag>
      </tags>
  </entry>
  <entry>
    <title>.NET5部署到Linux</title>
    <url>/post/af369074.html</url>
    <content><![CDATA[<h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><h5 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h5><p>操作系统可选择你比较熟悉的Linux发行版，如果你是第一次接触Linux，那我推荐使用CentOs，因为本文的内容都是在CentOs中进行演示的。</p>
<p>至于系统的安装，你可以选择云服务器，或者使用虚拟机安装。虚拟机安装CentOs的方式比较简单，在此就不赘述了。</p>
<h5 id="连接工具"><a href="#连接工具" class="headerlink" title="连接工具"></a>连接工具</h5><p>笔者推荐使用XSHELL作为连接工具，下载地址：<a href="https://www.netsarang.com/zh/xshell-download/">https://www.netsarang.com/zh/xshell-download/</a></p>
<p>安装完成后，打开软件，点击左上角的新建回话按钮，打开新建回话框，如下图所示：</p>
<p><img data-src="https://res.aimon.cc/img/20201204150421.png" alt="20201105201340"></p>
<p>在【主机】中填写服务器的ip地址，然后点击【连接】按钮，会依次提示输入用户名和密码。连接成功的界面如下所示：</p>
<p><img data-src="https://res.aimon.cc/img/20201204150422.png" alt="20201105201748"></p>
<h5 id="文件上传工具"><a href="#文件上传工具" class="headerlink" title="文件上传工具"></a>文件上传工具</h5><p>要想把服务部署到Linux服务器，那就必须把文件传输到服务器中（这是句废话）。根据不同的使用场景，笔者推荐两种方案，分别是XFTP工具上传和git仓库中转。</p>
<p>使用XFTP上传的方式需要在开发的机器上安装此工具，下载地址：<a href="https://www.netsarang.com/zh/xftp-download/">https://www.netsarang.com/zh/xftp-download/</a></p>
<p>安装完成后，可以通过XSHELL一键打开XFTP，XFTP打开后，在软件的右侧可以切换要上传文件的目标路径，然后将文件拖到右侧释放后，就会自动上传了，如下图所示：</p>
<p><img data-src="https://res.aimon.cc/img/20201204150423.gif" alt="a1"></p>
<p>使用git仓库进行中转的方式是笔者比较推荐的方式，因为在频繁的迭代更新中，如果通过现在本地编译发布后，再将文件拷贝到服务器，这个操作流程稍显繁琐。而通过git仓库周转的方式则相对比较简单，开发者仅需要将开发好的代码推到git仓库，然后在服务器中执行build，publish等操作，少了繁琐的拷贝文件的过程，同时由于build和publish都是在服务器中执行，那么我们就可以通过编写部署脚本的方式，可以最终实现一键快速部署。</p>
<p>使用git的方案需要在服务器安装git客户端，并配置ssh公钥（配置公钥的目的是拉取私有的仓库，公共参考无需配置公钥）。下面来看具体的操作步骤：</p>
<p>首先，执行如下命令，安装git客户端：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y install git</span><br></pre></td></tr></table></figure>

<p>git安装后，通过如下命令生成sshkey:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 这里的xx@xxx.com只是生成的sshkey的名称，并不约束货要求具体命名为某个邮箱。</span></span><br><span class="line">ssh-keygen -t rsa -C &quot;xx@xxx.com&quot;  </span><br></pre></td></tr></table></figure>

<p>按照提示，按三次回车，即可生成sshkey，如下图所示：<br><img data-src="https://res.aimon.cc/img/20201204150424.png" alt="20201105212252"></p>
<p>，通过如下命令可查看公钥：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure>

<p>复制生成后的sshkey，配置到代码仓库的公钥中。下面简单演示下gitee代码托管平台下如何配置公钥（其他平台大同小异）。</p>
<p>进入私有仓库的【管理】页面，找到【公钥管理】，点击【添加公钥】，将刚刚生成的公钥复制过去，如下图所示：</p>
<p><img data-src="https://res.aimon.cc/img/20201204150425.png" alt="20201105213004"></p>
<p>添加后，在终端中输入如下命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh -T git@gitee.com</span><br></pre></td></tr></table></figure>

<p>次使用需要确认并添加主机到本机SSH可信列表，如下图所示：</p>
<p><img data-src="https://res.aimon.cc/img/20201204150426.png" alt="20201105213248"></p>
<p>输入yes后，出现类似于Hi xxx的字样，则表示git公钥配置成功了。</p>
<h5 id="NET-Core-SDK和运行时"><a href="#NET-Core-SDK和运行时" class="headerlink" title=".NET Core SDK和运行时"></a>.NET Core SDK和运行时</h5><p>.NET运行时是.NET程序运行的先决条件，而SDK并不是必须的，但如果通过git方式进行文件中转的话，就涉及到在服务器端进行编译，所以SDK也需要安装。（<em>注：docker部署方式无需在服务器安装SDK和运行时，下文回提到</em>）<br>下面一起看看在CentOs中如何安装SDK和运行时（其他环境可参考官方文档：<a href="https://docs.microsoft.com/zh-cn/dotnet/core/install/linux%EF%BC%89%E3%80%82">https://docs.microsoft.com/zh-cn/dotnet/core/install/linux）。</a></p>
<p>运行如下命令，将 Microsoft 包签名密钥添加到受信任密钥列表，并添加 Microsoft 包存储库。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo rpm -Uvh https://packages.microsoft.com/config/centos/7/packages-microsoft-prod.rpm</span><br></pre></td></tr></table></figure>

<p>通过如下命令安装SDK:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum install -y dotnet-sdk-3.1</span><br></pre></td></tr></table></figure>

<p>.NET Core SDK 使你可以通过 .NET Core 开发应用。 如果安装 .NET Core SDK，则无需安装相应的运行时。</p>
<p>通过如下命令安装运行时：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum install -y aspnetcore-runtime-3.1</span><br></pre></td></tr></table></figure>

<p>注：上述命令中的最后的3.1表示的是版本号，如果安装其他版本，修改对应的版本号即可。参考资料：<a href="https://dotnet.microsoft.com/download/dotnet-core">https://dotnet.microsoft.com/download/dotnet-core</a></p>
<h4 id="发布程序到服务器"><a href="#发布程序到服务器" class="headerlink" title="发布程序到服务器"></a>发布程序到服务器</h4><p>在准备工作中已经介绍了两种将文件发布到服务器的方式，下面具体演示下步骤。</p>
<h5 id="通过XFTP发布到服务器"><a href="#通过XFTP发布到服务器" class="headerlink" title="通过XFTP发布到服务器"></a>通过XFTP发布到服务器</h5><p>首先，准备好要发布的程序，<br>下图是我创建的一个.NET Core3.1的示例代码：</p>
<p><img data-src="https://res.aimon.cc/img/20201204150427.png" alt="20201106132910"></p>
<p>打开vs的程序包管理器控制台，执行如下命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dotnet publish -o ./publish</span><br></pre></td></tr></table></figure>

<p>执行结果如下图所示：</p>
<p><img data-src="https://res.aimon.cc/img/20201204150428.png" alt="20201106133127"></p>
<p>在上图可以看到，发布之后的文件的路径为：D:\code\test\BuildTest\publish\</p>
<p>打开XFTP，将publish文件夹拖到右侧窗口，即可完成上传。</p>
<p><img data-src="https://res.aimon.cc/img/20201204150429.gif" alt="a2"></p>
<h5 id="通过git中转。"><a href="#通过git中转。" class="headerlink" title="通过git中转。"></a>通过git中转。</h5><p>首先，将代码推送到git仓库中，复制SSH地址。如下图所示：</p>
<p><img data-src="https://res.aimon.cc/img/20201204150430.png" alt="20201106141159"></p>
<p>然后再服务器中，执行克隆命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir code</span><br><span class="line">cd code</span><br><span class="line">git clone git@gitee.com:billsking/build-test.git</span><br></pre></td></tr></table></figure>

<p>执行结果如下图所示：</p>
<p><img data-src="https://res.aimon.cc/img/20201204150431.png" alt="20201106141435"></p>
<p>此时项目代码已经下载到服务器中，切换工作到解决方案所在的目录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd build-test</span><br></pre></td></tr></table></figure>

<p>然后我们需要执行dotnet publish命令对程序进行编译发布。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dotnet publish -o /root/web/publish</span><br></pre></td></tr></table></figure>

<p>执行完毕后，编译后的文件将被保存在/root/web/publish目录中。将工作目录切换到/root/web/publish，执行如下命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dotnet BuildTest.dll</span><br></pre></td></tr></table></figure>

<p>执行结果如下图：</p>
<p><img data-src="https://res.aimon.cc/img/20201204150432.png" alt="20201106143301"></p>
<p>到这里为止，咱们的程序已经在linux服务器运行起来了。但直接通过dotnet命令仅适合临时测试使用，并不能成为生产场景的解决方案。下面进来跟我一起了解下可用于生产环境的部署方式吧。</p>
<h4 id="Supervisor-Nginx组合"><a href="#Supervisor-Nginx组合" class="headerlink" title="Supervisor+Nginx组合"></a>Supervisor+Nginx组合</h4><p>Supervisor是用Python开发的一套通用的进程管理程序，能将一个普通的命令行进程变为后台daemon，并监控进程状态，异常退出时能自动重启。下面是Supervisor安装方法。<br>执行如下命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y supervisor</span><br></pre></td></tr></table></figure>

<p>执行以上代码如果提示：没有可用软件包 supervisor。则需要先安装EPEL源后，再执行上面的命令。安装EPEL源的命令如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y epel-release</span><br></pre></td></tr></table></figure>

<p>设置开机启动：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl enable supervisord</span><br></pre></td></tr></table></figure>

<p>启动supervisord</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl start supervisord</span><br></pre></td></tr></table></figure>

<p>查看状态</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl status supervisord</span><br></pre></td></tr></table></figure>

<p><img data-src="https://res.aimon.cc/img/20201204150433.png" alt="20201106150000"></p>
<p>通过vi命令或者XFTP修改配置文件开启web界面访问，如下图所示，分别取消inet_http_server等四个配置的注释：</p>
<p><img data-src="https://res.aimon.cc/img/20201204150434.png" alt="20201106150527"></p>
<p>执行如下命令，重新加载配置文件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">supervisorctl reload</span><br></pre></td></tr></table></figure>

<p>然后在浏览器打开http://你的ip:9001，输入用户名密码后，如图所示：</p>
<p><img data-src="https://res.aimon.cc/img/20201204150435.png" alt="20201106151109"></p>
<p>看到这个界面，就表示supervisor安装完成了。</p>
<p>切换到/etc/supervisord.d目录，在此目录创建ini文件，内容如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[program:buildtest] ;表示程序名称，用于在supervisor中显示，无特殊意义。</span><br><span class="line">command&#x3D;&#x2F;bin&#x2F;bash -c &quot;dotnet BuildTest.dll&quot;; 输入执行命令，这里表示执行的是dotnet BuildTest.dll</span><br><span class="line">directory&#x3D;&#x2F;root&#x2F;web&#x2F;publish ; 应用程序根目录 </span><br><span class="line">autostart&#x3D;true ; 是否自动启动，当 supervisor 加载该配置文件的时候立即启动它 </span><br><span class="line">autorestart&#x3D;true ; 是否自动重启， 程序异常退出后自动重启</span><br><span class="line">logfile_maxbytes&#x3D;50MB ; 该配置文件输出单个日志文件的大小，默认50M</span><br><span class="line">logfile_backups&#x3D;10 ; 日志备份个数 </span><br><span class="line">loglevel&#x3D;info ; 记录日志级别 </span><br><span class="line">stdout_logfile&#x3D;&#x2F;root&#x2F;data&#x2F;logs&#x2F;buildtest&#x2F;buildtest.out.log ; 指定标准输出日志文件 </span><br><span class="line">environment&#x3D;ASPNETCORE_ENVIRONMENT&#x3D;Production;环境变量。</span><br><span class="line">user&#x3D;root ;启动服务的用户  </span><br><span class="line">redirect_stderr&#x3D;true;把 stderr 重定向到 stdout，默认 false</span><br></pre></td></tr></table></figure>

<p>++注：stdout_logfile指向的文件夹一定要先创建，否则无法启动。++</p>
<p>然后执行如下命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">supervisorctl reload</span><br></pre></td></tr></table></figure>

<p>命令执行成功后， 刷新浏览器，可以看到如下界面：</p>
<p><img data-src="https://res.aimon.cc/img/20201204150436.png" alt="20201109100404"></p>
<p>当界面显示running时，则表示我们我们刚刚配置的应用程序运行起来了。</p>
<p>但现在还存在一个问题，我们的应用程序默认是绑定的5000端口，如果要指定80端口或者配置域名该怎么处理呢？下面就该nginx登场了。</p>
<p>Nginx是一款轻量级的Web 服务器/反向代理服务器及电子邮件（IMAP/POP3）代理服务器，在BSD-like 协议下发行。其特点是占有内存少，并发能力强，事实上nginx的并发能力在同类型的网页服务器中表现较好，中国大陆使用nginx网站用户有：百度、京东、新浪、网易、腾讯、淘宝等。（来源自百度百科）</p>
<p>安装方式参考：<a href="http://nginx.org/en/linux_packages.html#RHEL-CentOS">http://nginx.org/en/linux_packages.html#RHEL-CentOS</a></p>
<p>安装先决条件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y yum-utils</span><br></pre></td></tr></table></figure>

<p>设置yum存储库，先创建一下内容的文件：/etc/yum.repos.d/nginx.repo</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[nginx-stable]</span></span><br><span class="line"><span class="attr">name</span>=nginx stable repo</span><br><span class="line"><span class="attr">baseurl</span>=http://nginx.org/packages/centos/<span class="variable">$releasever</span>/<span class="variable">$basearch</span>/</span><br><span class="line"><span class="attr">gpgcheck</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">enabled</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">gpgkey</span>=https://nginx.org/keys/nginx_signing.key</span><br><span class="line"><span class="attr">module_hotfixes</span>=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="section">[nginx-mainline]</span></span><br><span class="line"><span class="attr">name</span>=nginx mainline repo</span><br><span class="line"><span class="attr">baseurl</span>=http://nginx.org/packages/mainline/centos/<span class="variable">$releasever</span>/<span class="variable">$basearch</span>/</span><br><span class="line"><span class="attr">gpgcheck</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">enabled</span>=<span class="number">0</span></span><br><span class="line"><span class="attr">gpgkey</span>=https://nginx.org/keys/nginx_signing.key</span><br><span class="line"><span class="attr">module_hotfixes</span>=<span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>默认情况下，使用稳定 nginx 包的存储库。如果要使用主线 nginx 包，请运行以下命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum-config-manager --enable nginx-mainline</span><br></pre></td></tr></table></figure>

<p>运行如下命令安装nginx：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y nginx</span><br></pre></td></tr></table></figure>

<p>设置开机启动：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl enable nginx</span><br></pre></td></tr></table></figure>

<p>启动nginx：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl start nginx</span><br></pre></td></tr></table></figure>

<p>此时，就可以在浏览器通过ip访问了：<a href="http://你的ip/">http://你的ip</a>，界面如下：</p>
<p><img data-src="https://res.aimon.cc/img/20201204150437.png" alt="20201109101553"></p>
<p>nginx安装完成后，切换到/etc/nginx/conf.d目录，修改default.conf文件内容，如下所示：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  localhost;</span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://0.0.0.0:5000;</span><br><span class="line">    &#125;</span><br><span class="line">    error_page   500 502 503 504  /50x.html;</span><br><span class="line">    <span class="attr">location</span> = /<span class="number">50</span>x.html &#123;</span><br><span class="line">        root   /usr/share/nginx/html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>保存后，执行如下命令，重新加载配置：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure>

<p>然后再次访问http://你的ip，幸运的话，你应该可以看到如下的界面，表示你的.NET Core程序已经完美运行在linux系统了。</p>
<p><img data-src="https://res.aimon.cc/img/20201204150438.png" alt="20201109111932"></p>
<p>如果你不幸的看到了如下界面：</p>
<p><img data-src="https://res.aimon.cc/img/20201204150439.png" alt="20201109112035"></p>
<p>不要着急，继续往下看。</p>
<p>出现这个问题的原因是因为SeLinux的限制，执行如下命令之后，再刷新页面：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">setenforce 0     </span><br></pre></td></tr></table></figure>

<p>如果还是看到的错误页面，就需要去查看nginx的日志了，默认的日志路径为：/var/log/nginx</p>
<p>通过setenforce 0命令，只是临时实效，重启后回失效的。一劳永逸的做法是，修改/etc/selinux/config 文件，　将<strong>SELINUX=enforcing改为SELINUX=disabled</strong>，然后重启机器。</p>
<p>后面如果你需要更新你的应用程序，只需要将代码提交到git仓库，然后在服务器中执行git pull和dotnet publish就行了。</p>
<p>如果你对shell比较熟悉的话，还可以通过编写shell命令一键执行应用程序的更新，下面是我写的示例：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment"># !/bin/bash</span></span><br><span class="line">cd /root/code/build-test</span><br><span class="line">git pull</span><br><span class="line">dotnet publish -o /root/web/publish</span><br><span class="line">supervisorctl restart buildtest</span><br></pre></td></tr></table></figure>

<p>将上述的代码保存问sh文件，上传到服务器，并设置权限。如下图所示：</p>
<p><img data-src="https://res.aimon.cc/img/20201204150440.png" alt="20201109142811"></p>
<p>代码提交到git仓库后，执行如下命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./build.sh</span><br></pre></td></tr></table></figure>

<p>执行结果如下图所示：</p>
<p><img data-src="https://res.aimon.cc/img/20201204150441.png" alt="20201109143151"></p>
<p>总结一下，这种方式需要在服务端安装两个软件，supervisor和nginx，supervisor一个作为守护线程，用于维护应用程序的生命周期的。nginx则是作为反向代理使用。维护起来相对麻烦，那么有没有一个像IIS一样，既可以维护应用程序的生命周期，又可以对外暴露服务呢？答案是肯定的，继续往下看。</p>
<p>Jexus</p>
<blockquote>
<p>　　Jexus是一款Linux平台上的高性能WEB服务器和负载均衡网关服务器，以支持ASP.NET、ASP.NET CORE、PHP为特色，同时具备反向代理、入侵检测等重要功能。可以这样说，Jexus是.NET、.NET CORE跨平台的最优秀的宿主服务器，如果我们认为它是Linux平台的IIS，这并不为过，因为，Jexus不但非常快，而且拥有IIS和其它Web服务器所不具备的高度的安全性。同时，Jexus Web Server 是完全由中国人自主开发的的国产软件，真正做到了“安全、可靠、可控”， 具备我国党政机关和重要企事业单位信息化建设所需要的关键品质。</p>
</blockquote>
<p>以上内容摘自jexus官网：<a href="https://www.jexus.org/">https://www.jexus.org/</a></p>
<p>废话不多说，直接进入正题，首先是安装。</p>
<p>jexus的安装非常简单，执行如下命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl https://jexus.org/release/x64/install.sh|sudo sh</span><br></pre></td></tr></table></figure>

<p>注：如果在这之前你已经安装了nginx，需要先将nginx绑定的80端口释放，或者卸载nginx。</p>
<p>安装完成后，切换到/usr/jexus目录，修改/usr/jexus/siteconf目录下的default，内容如下所示：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">port</span>=<span class="number">80</span> <span class="comment">#端口</span></span><br><span class="line"><span class="attr">hosts</span>=*    <span class="comment">#域名</span></span><br><span class="line"><span class="attr">AppHost</span>=&#123;cmd=dotnet BuildTest.dll<span class="comment">; root=/root/web/publish; port=0&#125;</span></span><br></pre></td></tr></table></figure>

<p>然后执行如下命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/usr/jexus/jws restart</span><br></pre></td></tr></table></figure>

<p><img data-src="https://res.aimon.cc/img/20201204150442.png" alt="20201109162034"></p>
<p>当你看到执行结果为OK时，即可认为应用程序已经启动了。最后，执行如下命令，看下执行的结果：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ps -aux</span><br></pre></td></tr></table></figure>

<p><img data-src="https://res.aimon.cc/img/20201204150443.png" alt="20201109162246"></p>
<p>关于jexus更详细的使用说明，请参考官方文档。</p>
<p>Docker+Nginx或Jexus</p>
<p>上面讲到的， 不管是通过supervisor+nginx还是jexus，都需要在服务器安装 .NET Core的SDK或者运行时，假如咱们有好多个应用程序，有的用 .NET Core2.1，有的用 .NET Core3.1，有的用.NET5，那么上面的做法就需要咱们分别安装对应的SDK或者运行时，对于维护还是比较麻烦的。Docker的出现，可以完美解决上述问题。</p>
<p>关于Docker的介绍，有兴趣的可自行百度。下面来跟我一起来看下如何安装并使用Docker。</p>
<p>执行如下命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -fsSL get.docker.com -o get-docker.sh</span><br><span class="line">sudo sh get-docker.sh --mirror Aliyun</span><br></pre></td></tr></table></figure>

<p>执行这个命令后，脚本就会自动的将一切准备工作做好，并且把Docker的稳定版本安装在系统中。</p>
<p>执行如下命令设置docker开机启动：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl enable docker</span><br></pre></td></tr></table></figure>

<p>执行如下命令启动docker:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure>

<p>安装docker之后，我们需要在代码里增加dockerfile文件。什么？不会docker？不要紧，万能的Visual Studio可以帮你自动生成。在解决方案中，右击项目名称，依次选择【添加】，【Docker支持】，如下图所示：</p>
<p><img data-src="https://res.aimon.cc/img/20201204150444.png" alt="20201109165524"></p>
<p>生成的dockerfile文件如下所示：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">FROM mcr.microsoft.com/dotnet/core/aspnet:3.1-buster-slim AS base</span><br><span class="line">WORKDIR /app</span><br><span class="line">EXPOSE 80</span><br><span class="line"></span><br><span class="line">FROM mcr.microsoft.com/dotnet/core/sdk:3.1-buster AS build</span><br><span class="line">WORKDIR /src</span><br><span class="line">COPY [&quot;BuildTest/BuildTest.csproj&quot;, &quot;BuildTest/&quot;]</span><br><span class="line">RUN dotnet restore &quot;BuildTest/BuildTest.csproj&quot;</span><br><span class="line">COPY . .</span><br><span class="line">WORKDIR &quot;/src/BuildTest&quot;</span><br><span class="line">RUN dotnet build &quot;BuildTest.csproj&quot; -c Release -o /app/build</span><br><span class="line"></span><br><span class="line">FROM build AS publish</span><br><span class="line">RUN dotnet publish &quot;BuildTest.csproj&quot; -c Release -o /app/publish</span><br><span class="line"></span><br><span class="line">FROM base AS final</span><br><span class="line">WORKDIR /app</span><br><span class="line">COPY --from=publish /app/publish .</span><br><span class="line">ENTRYPOINT [&quot;dotnet&quot;, &quot;BuildTest.dll&quot;]</span><br></pre></td></tr></table></figure>

<p>将代码推送到git仓库，然后再linux服务器中拉取最新代码。</p>
<p>切换到/root/code/build-test目录，执行如下命令，拉取最新代码：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git pull</span><br></pre></td></tr></table></figure>

<p>然后执行如下命令，将代码打包为镜像：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker build -f ./BuildTest/Dockerfile -t buildtest .</span><br></pre></td></tr></table></figure>

<p>由于首次打包镜像的时候涉及到拉取.NET Core的官方镜像，拉取速度可能较慢，请耐心等待。打包完成后，执行如下命令，可查看当前服务器已存在的镜像：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure>

<p><img data-src="https://res.aimon.cc/img/20201204150445.png" alt="20201109170929"></p>
<p>镜像打包完成后，我们就可以通过docker run运行下，命令如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -p 82:80 -dit --restart=always --name buildtest buildtest</span><br></pre></td></tr></table></figure>

<p>执行结果如下：</p>
<p><img data-src="https://res.aimon.cc/img/20201204150446.png" alt="20201109171049"></p>
<p>通过浏览器访问：<a href="http://ip:82/">http://ip:82</a>。如无意外，你将看到你的应用程序已经成功运行了。</p>
<p>相同的道理，我们也是可以通过编写shell脚本的方式，实现一键更新应用程序的。在/root目录中，创建dockerbuild.sh文件，文件内容如下：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment"># !/bin/bash</span></span><br><span class="line"></span><br><span class="line">cd /root/code/build-test</span><br><span class="line">git pull</span><br><span class="line"><span class="attr">imtag</span>=$(uuidgen |sed <span class="string">&#x27;s/-//g&#x27;</span>)</span><br><span class="line">docker build -f ./BuildTest/Dockerfile -t buildtest:$&#123;imtag&#125; .</span><br><span class="line">docker stop buildtest</span><br><span class="line">docker rm buildtest</span><br><span class="line">docker run -dit --restart=always --name buildtest -p 82:80  buildtest:$&#123;imtag&#125;</span><br></pre></td></tr></table></figure>

<p>给dockerbuild.sh文件设置执行权限，命令如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chmod 777 dockerbuild.sh</span><br></pre></td></tr></table></figure>

<p>当有新代码推送到git仓库时，进入服务器，执行dockerbuild.sh即可快速更新应用程序。</p>
<p>到这里，.NET Core部署到linux服务器的方案已“基本”介绍完毕了。</p>
<p>为什么说是“基本”呢？不知道大家有没有发现，虽然目前的方案可以实现一键部署更新，但。。。。，我们还是需要登陆到linux服务器去执行这个命令，显然，这不是最好的方法。有没有更好的方案呢？如果当我们提交给git仓库后，自动出发部署命令是不是就更方便了呢？</p>
<p>答案是肯定的，我们可以借助jenkins来实现。限于篇幅，本篇文章就不讲解了，如有兴趣，你也可以先自行研究，或者敬请期待下次的讲解。</p>
<p>最后说明下，以上的方案还是存在很多的问题，对于小型团队已经够用，大型项目的终极解决方案应该是基于k8s实现的devops。其实k8s实现devops的原理和我上述介绍的方案基本一致。借助与gitlab的runner或者jenkins，监听git仓库的状态，当发现指定的分支发生变化后，打包镜像，然后通过替换k8s的deployment的镜像来实现自动更新。同时，k8s实现了弹性伸缩、滚动更新等功能。</p>
<blockquote>
<p>转自：<a href="https://www.cnblogs.com/fulu/p/13983734.html#!comments">https://www.cnblogs.com/fulu/p/13983734.html#!comments</a></p>
</blockquote>
]]></content>
      <categories>
        <category>coding</category>
        <category>c#</category>
      </categories>
      <tags>
        <tag>c#</tag>
      </tags>
  </entry>
</search>
